#! /bin/bash

appdir="$(cd $(dirname "$BASH_SOURCE") && pwd)"
appname="$(basename "$BASH_SOURCE")"
. "$appdir/lib/daggen/irtk.sh" || { echo "Failed to import daggen/irtk module!" 1>&2; exit 1; }

# ==============================================================================
# help
# ==============================================================================

# ------------------------------------------------------------------------------
print_help()
{
  cat <<HELP

usage: $(basename "$0") [options]

This script generates the DAGMan application for the generation of a
consistent brain atlas and growth model for submission to the batch
queuing system HTCondor for distributed parallel execution.

Options:
  -s -sublst <sub.lst>     Text file listing the IDs of the images
                           to use for the atlas construction. If not
                           specified, the IDs are read from the -agelst.
                           (default: $appdir/etc/sub.lst)

  -a -agelst <age.csv>     Comma/space-separated CSV file, where the
                           first column contains the image ID and the
                           second column the associated age.
                           (default: $appdir/etc/age.csv)

  -c -config <config.sh>   Configuration file.
                           (default: $appdir/etc/config.sh)

  -h -help                 Print help and exit.
  -v -verbose              Enable verbose output messages.
HELP
}

# ==============================================================================
# configuration
# ==============================================================================

verbose=0
sublst=
agelst="$appdir/etc/age.csv"
config="$appdir/etc/config.sh"

o=0
while [ $o -lt $# ]; do
  case "${!o}" in
    -c|-config) let a=o+1; optarg config ${!o} "${!a}"; ;;
  esac
  let o++
done
. "$config"  || error "Failed to load configuration from file: $config"

while [ $# -gt 0 ]; do
  case "$1" in
    -s|-sublst)      optarg sublst $1 "$2"; shift; ;;
    -a|-agelst)      optarg agelst $1 "$2"; shift; ;;
    -c|-config)      shift; ;; # already loaded
    -h|-help|--help) print_help; exit 0; ;;
    -v|-verbose)     let verbose++; ;;
    -*)              error "Unknown option: $1"; ;;
    *)               if   [ -z "$agelst" ]; then agelst="$1"
                     elif [ -z "$sublst" ]; then sublst="$1"
                     else error "Too many arguments: $1"
                     fi; ;;
  esac
  shift
done

if [ -z "$agelst" ]; then
  error "Missing CSV file with subject IDs and corresponding ages!"
fi
if [ -z "$sublst" ]; then
  sublst="$appdir/etc/sub.lst"
  [ -f "$sublst" ] || sublst="$agelst"
fi
read_sublst subids "$sublst"

cd "$topdir" || error "Failed to change to top-level directory!"

# atlas time points for which kernel was create either manually,
# with another tool (e.g. MATLAB), or using the "kernel" shell script
timepoints=()
for doflst in $(ls "$kernel/weights_t="*".csv"); do
  t=${f/*=}; t=${f/.csv}
  timepoints=(${t[@]} $t)
done

# ==============================================================================
# workflow
# ==============================================================================

begin_dag 'brainatlas' -dagfile "$appdir/main.dag" -dagdir "$dagdir"

  # ----------------------------------------------------------------------------
  # global normalization (translation, rotation, and scale)
  begin_dag 'alignment'

    # initialize transformations
    ireg_node 'initdofs' \
        -model    "Similarity" \
        -subjects "${subids[@]}" \
        -dofdir   "$dofdir/1.1_initial"

    # affine registration
    ireg_node 'affinereg' -parent 'initdofs' \
        -model    "Affine" -par "Allow shearing = No" \
        -subjects "${subids[@]}" \
        -bgvalue  "$bgvalue" \
        -dofins   "$dofdir/1.1_initial" \
        -dofdir   "$dofdir/1.2_affine"

    # average dofs
    dofaverage_node 'avgdofs1' -parent 'affinereg' \
        -subjects "${subids[@]}" \
        -dofins   "$dofdir/1.2_affine" \
        -dofdir   "$dofdir/1.3_average"

    # affine refinement
    ireg_node 'refine' -parent 'avgdofs1' \
        -model    "Affine" -par "Allow shearing = No" \
        -subjects "${subids[@]}" \
        -bgvalue  "$bgvalue" \
        -hdrdofs  "$dofdir/1.3_average" \
        -dofdir   "$dofdir/1.4_refined"

    # average dofs
    dofaverage_node 'avgdofs2' -parent 'refine' \
        -subjects "${subids[@]}" \
        -dofins   "$dofdir/1.4_refined" \
        -dofdir   "$dofdir/1.5_average"

    # compose average dofs
    dofcombine_node 'finalize' -parent 'avgdofs2' \
        -subjects "${subids[@]}" \
        -dofdir1  "$dofdir/1.3_average" \
        -dofdir2  "$dofdir/1.5_average" \
        -dofdir3  "$dofdir/1___affine"

  end_dag

  # ----------------------------------------------------------------------------
  # compute cross-sectional FFDs for each time point
  begin_dag 'avgffds' -parent 'alignment'

    # deformable registration
    ireg_node 'computeffds' \
        -model    "BSplineSVFFD" -par "Multi-level transformation = None" \
        -subjects "${subids[@]}" \
        -bgvalue  "$bgvalue" \
        -hdrdofs  "$dofdir/1___affine" \
        -dofdir   "$dofdir/2.1_ffd"

    # average dofs
    for t in ${timepoints[@]}; do
      dofaverage_node "avgffds_$t" -parent 'computeffds' \
          -doflst "$kernel/weights_t=$t.csv" \
          -dofins "$dofdir/2.1_ffd" \
          -dofdir "$dofdir/2___avgffd/t=$t"
    done

  end_dag

  # ----------------------------------------------------------------------------
  # make anatomical atlas images
  begin_dag 'anatomy' -parent 'avgffds'
    # TODO
  end_dag

  # ----------------------------------------------------------------------------
  # make tissue probability maps
  begin_dag 'tissues' -parent 'avgffds'
    # TODO
  end_dag

  # ----------------------------------------------------------------------------
  # make structural probability maps
  begin_dag 'structures' -parent 'avgffds'
    # TODO
  end_dag

  # ----------------------------------------------------------------------------
  # construct longitudinal growth model
  begin_dag 'growth' -parent 'avgffds'
    # TODO
  end_dag
 
end_dag
