#!/bin/bash

appdir="$(cd "$(dirname "$BASH_SOURCE")/.." && pwd)"
appname="$(basename "$BASH_SOURCE")"
. "$appdir/lib/daggen/irtk.sh" || { echo "Failed to import daggen/irtk module!" 1>&2; exit 1; }

# ==============================================================================
# help
# ==============================================================================

# ------------------------------------------------------------------------------
print_help()
{
  cat <<HELP

usage: $(basename "$0") [options]

Warp (label) images using the computed pairwise transformations.

Options:
  -s -sublst <sub.lst>     Text file listing the IDs of the images
                           to use for the atlas construction. If not
                           specified, the IDs are read from the -agelst.
                           (default: $appdir/etc/sub.lst)

  -a -agelst <age.csv>     Comma/space-separated CSV file, where the
                           first column contains the image ID and the
                           second column the associated age.
                           (default: $appdir/etc/age.csv)

  -c -config <config.sh>   Configuration file.
                           (default: $appdir/etc/config.sh)

  -i -input <dir>          Input directory containing the input label maps.
                           (default: $indir)

  -o -output <dir>         Output directory where to write the transformed label maps to.
                           (default: $outdir)

  -prefix <str>            Filename prefix.                               (default: none)
  -suffix <str>            Filename suffix including file name extension. (default: .nii.gz)
  -nn                      Use nearest-neighbor interpolation.            (default: linear)
  -images                  Default settings for intensity images.
  -labels                  Default settings for tissue label maps.
  -structures              Default settings for structure label maps.

  -h -help                 Print help and exit.
  -v -verbose              Enable verbose output messages.
HELP
}

# ==============================================================================
# auxiliary functions
# ==============================================================================

# ------------------------------------------------------------------------------
finalize()
{
  for id in ${pid[@]}; do
    kill ${pid[@]}
  done
  wait
}
trap finalize EXIT

# ==============================================================================
# main
# ==============================================================================

verbose=0
options=()
sublst=
agelst="$appdir/etc/age.csv"
config="$appdir/etc/config.sh"
prefix=
suffix='.nii.gz'
interp='linear'

o=0
while [ $o -lt $# ]; do
  case "${!o}" in
    -c|-config) let a=o+1; optarg config ${!o} "${!a}"; ;;
  esac
  let o++
done
. "$config"  || error "Failed to load configuration from file: $config"

indir="$(cd  "$appdir/$imgdir" && pwd)"
outdir="$(cd "$appdir/../eval/warped-images" && pwd)"

while [ $# -gt 0 ]; do
  case "$1" in
    -i|-input)       optarg indir  $1 "$2"; shift; ;;
    -prefix)         optarg prefix $1 "$2"; shift; ;;
    -suffix)         optarg suffix $1 "$2"; shift; ;;
    -nn)             interp='nn'; ;;
    -bspline)        interp='bspline'; ;;
    -images)         indir="$(cd "$appdir/$imgdir" && pwd)"
                     outdir="$(cd "$appdir/../eval/warped-images" && pwd)"
                     prefix=''; suffix='.nii.gz'
                     interp='linear'; ;;
    -tissues)        indir="$(cd "$appdir/$lbldir" && pwd)"
                     outdir="$(cd "$appdir/../eval/warped-labels" && pwd)"
                     prefix=''; suffix='-tissues.nii.gz'
                     interp='nn'; ;;
    -structures)     indir="$(cd "$appdir/$lbldir" && pwd)"
                     outdir="$(cd "$appdir/../eval/warped-structures" && pwd)"
                     prefix=''; suffix='-all.nii.gz'
                     interp='nn'; ;;
    -o|-output)      optarg outdir $1 "$2"; shift; ;;
    -s|-sublst)      optarg sublst $1 "$2"; shift; ;;
    -a|-agelst)      optarg agelst $1 "$2"; shift; ;;
    -c|-config)      shift; ;; # already loaded
    -l|-label)       label=(); optargs label "$@"; shift ${#label[@]}; ;;
    -m|-metric)      optarg $1 "$2"; shift; ;;
    -h|-help|--help) print_help; exit 0; ;;
    -v|-verbose)     let verbose++; ;;
    *)               options=("${options[@]}" "$1"); ;;
  esac
  shift
done

if [ -z "$agelst" ]; then
  error "Missing CSV file with subject IDs and corresponding ages!"
fi
if [ -z "$sublst" ]; then
  sublst="$appdir/etc/sub.lst"
  [ -f "$sublst" ] || sublst="$agelst"
fi
read_sublst subids "$sublst"

mkdir -p "$outdir" || exit 1

pid=()
t=0
for id1 in ${subids[@]}; do
  let t++
  [ $verbose -le 1 ] || echo "Transforming images to space of subject $id1... $(printf %3d/%d $t ${#subids[@]})"
  mkdir -p "$outdir/$id1" || exit 1
  (
    # resample target in affine reference space
    $appdir/bin/transformation "$indir/$prefix$id1$suffix" \
                               "$outdir/$id1/$prefix$id1$suffix" \
                               -dof "$dofdir/1___affine/$id1.dof.gz" \
                               -dofin identity \
                               -matchInputType \
                               -target "$pardir/ref.nii.gz" \
                               -nn > /dev/null
    # transform resampled target back to original target space
    $appdir/bin/headertool "$outdir/$id1/$prefix$id1$suffix" \
                           "$outdir/$id1/$prefix$id1$suffix" \
                           -dofin_i "$dofdir/1___affine/$id1.dof.gz" \
                           > /dev/null
  ) &
  pid=(${pid[@]} $!)
  for id2 in ${subids[@]}; do
    [[ $id1 != $id2 ]] || continue
    if [ ${#pid[@]} -eq 8 ]; then
      wait ${pid[0]}
      unset pid[0]
      pid=(${pid[@]})
    fi
    (
      # deform and resample source in affine reference space
      $appdir/bin/transformation "$indir/$prefix$id2$suffix" \
                                 "$outdir/$id1/$prefix$id2$suffix" \
                                 -dof   "$dofdir/1___affine/$id2.dof.gz" \
                                 -dofin "$dofdir/2.1_ffd/$id1/$id2.dof.gz" \
                                 -matchInputType \
                                 -target "$pardir/ref.nii.gz" \
                                 -nn > /dev/null
      # transform warped source to original target space
      $appdir/bin/headertool "$outdir/$id1/$prefix$id2$suffix" \
                             "$outdir/$id1/$prefix$id2$suffix" \
                             -dofin_i "$dofdir/1___affine/$id1.dof.gz" \
                             > /dev/null
    ) &
    pid=(${pid[@]} $!)
  done
  wait && pid=()
  [ $verbose -le 1 ] || echo "Transforming images to space of subject $id1... done"
done
