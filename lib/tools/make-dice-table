#!/bin/bash
[ $# -ge 1 ] || { echo "usage: $0 <table> [<append:0|1>] [<outdir> <test_id>...|<csvdir>]" 1>&2; exit 1; }

table="$1"
shift

append="${1:-1}"
shift

outdir="${1:-$PWD}"
shift

tests=($@)
[ ${#tests[@]} -gt 0 ] || tests=(0)


get_name()
{
  local i="$1"
  local name=''
  if [ $i -gt 0 ]; then
    for pre in 'test' 'params'; do
      name="${pre}_$(printf '%03d' "$i")"
      [ ! -d "$outdir/$name" ] || break
    done
    if [ -z "$name" ]; then
      echo "$name: could not find test output directory" 1>&2
      exit 1
    fi
  fi
  echo "$name"
}


get_csvdir()
{
  local name="$1"
  local csvdir="$outdir"
  if [ $i -gt 0 ]; then
    for subdir in "labels/structures/overlap" "overlap"; do
      csvdir="$outdir/$name/$subdir"
      [ ! -d "$csvdir" ] || break
    done
  fi
  echo "$csvdir"
}


get_avgcsv()
{
  local name="$1"
  echo "$outdir/$name/tables/dsc.csv"
}


for i in ${tests[@]}; do
  name="$(get_name "$i")"
  csvdir="$(get_csvdir "$name")"
  avgcsv="$(get_avgcsv "$name")"
  if [ ! -f "$avgcsv" ]; then
    [ -z "$name" ] || echo "$name: compute average of individual pairwise overlaps"
    csvlst=($(find "$csvdir" -name '*.csv' -type f))
    if [ ${#csvlst[@]} -gt 0 ]; then
      mirtk average-overlap "${csvlst[@]}" \
          --noid \
          --measure DSC \
          --segment BG 84 \
          --segment CSF 83 \
          --segment WM 51..82 \
          --segment cGM 5..16 20..39 \
          --segment dGM 40..48 85 86 87 \
          --segment CC 48 \
          --segment BS+CB 17 18 19 \
          --segment Amygdala+Hippocampus 1..4 \
          --segment Ventricles 49 50 \
          --output  "$avgcsv"
      [ $? -eq 0 ] || exit 1
    else
      echo "Could not find any CSV files in $csvdir" 1>&2
      exit 1
    fi
  fi
done

segments=('BG' 'CSF' 'WM' 'cGM' 'dGM' 'CC' 'BS+CB' 'Amygdala+Hippocampus' 'Ventricles')
if [[ $append == false ]] || [[ $append == no ]] || [[ $append == 0 ]]; then
  if [ ${#tests[@]} -gt 1 -o ${tests[0]} -ne 0 ]; then
    echo -n "Test" > "$table" || exit 1
    c=1
  else
    rm -f "$table" || exit 1
    c=0
  fi
  for segment in "${segments[@]}"; do
    [ $c -eq 0 ] || echo -n ',' >> "$table"
    echo -n "$segment" >> "$table"
    let c++
  done
  echo >> "$table"
fi
for i in ${tests[@]}; do
  name="$(get_name "$i")"
  csvdir="$(get_csvdir "$name")"
  avgcsv="$(get_avgcsv "$name")"
  if [ $i -eq 0 ]; then
    c=0
  else
    echo -n "$i" >> "$table"
    c=1
  fi
  for segment in "${segments[@]}"; do
    dice=$(grep "^$segment," "$avgcsv" | cut -d, -f2)
    [ $? -eq 0 ] || { echo "Segment $segment row not found in '$avgcsv'" 1>&2; exit 1; }
    [ $c -eq 0 ] || echo -n ',' >> "$table"
    echo -n "$dice" >> "$table"
    let c++
  done
  echo >> "$table"
done
