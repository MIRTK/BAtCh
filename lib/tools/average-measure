#!/usr/bin/python

import os
import sys
import numpy as np
import nibabel as nib
import argparse

def read_image_data(path):
    """Read image data into 1D numpy array of type float64."""
    return nib.load(path).get_data().flatten().astype(np.float64)


def filename(path):
    """Get filename without extension."""
    name = os.path.basename(path)
    name, ext = os.path.splitext(name)
    if ext.lower() == ".gz":
        name = os.path.splitext(name)[0]
    return name


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Average voxel-wise measure within each region of interest (ROI).")
    parser.add_argument("measure", nargs="+",
                        help="Input image(s) of voxel-wise scalar measure.")
    parser.add_argument("-n", "-name", "-names", "--name", "--names", dest="name", nargs="+", default=[],
                        help="Names of input measures.")
    parser.add_argument("-o", "-output", "-table", "--output", "--table", dest="table",
                        help="Output table")
    parser.add_argument("-r", "-region", "-roi", "--region", "-roi", dest="roi", nargs="+",
                        help="Binary mask or segmentation probability map of ROI(s).")
    parser.add_argument("-d", "-delim", "-delimiter", "--delim", "--delimiter", dest="delim", default=",",
                        help="String/character used to delimit table entries.")
    parser.add_argument("-s", "-scale", "--scale", dest="scale", type=float, default=1.,
                        help="Common scaling factor by which to multiply input values.")
    parser.add_argument("-preload", "--preload", dest="preload", action="store_true",
                        help="Read each input image only once. Requires enough memory to preload all measures into memory.")
    parser.add_argument("-a", "-append", "--append", action="store_true",
                        help="Append results to existing table.")
    args = parser.parse_args()
    if len(args.name) > len(args.measure):
        raise ValueError("More --names specified than input measures given!")
    for i in range(len(args.name), len(args.measure)):
        args.name.append(filename(args.measure[i]))
    out = sys.stdout
    sep = args.delim
    measure = {}
    if args.preload:
        for name, path in zip(args.name, args.measure):
            measure[name] = read_image_data(path)
    # FIXME: Read existing table and insert missing/newly computed values
    #        Consider pandas DataFrame to easily be able to refer to columns by measure name
    if args.table:
        if args.append:
            out = open(args.table, "at")
        else:
            out = open(args.table, "wt")
    try:
        out.write("roi")
        for name in args.name:
            out.write(sep)
            out.write(name)
        out.write("\n")
        for i in range(len(args.roi)):
            #out.write("{0:d}".format(i + 1))
            out.write(filename(args.roi[i]))
            roi = read_image_data(args.roi[i])
            for name, path in zip(args.name, args.measure):
                out.write(sep)
                if name in measure:
                    values = measure[name]
                else:
                    values = read_image_data(path)                    
                # Note: When using float32, the result differs from MIRTK calculate-element-wise and builtin sum
                out.write("{0:.5f}".format(np.sum(values * (roi / np.sum(roi)))))
            out.write("\n")
    finally:
        out.close()
