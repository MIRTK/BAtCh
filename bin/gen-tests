#! /bin/bash

appid="$(basename "$0")"
appdir="$(cd "$(dirname "$BASH_SOURCE")" && pwd)"
appdir="$(cd "$appdir/.." && pwd)"

source "$appdir/lib/daggen/mirtk.sh" || {
  echo "Failed to import daggen/mirtk module!" 1>&2
  exit 1
}
source "$appdir/etc/config/default.sh" || {
  error "Failed to load default configuration"
}

# ==============================================================================
# help
# ==============================================================================

# ------------------------------------------------------------------------------
print_help()
{
  cat <<HELP

usage: $appid <sublst> <refimg> <dagdir> <outdir> [options]

This script generates the DAGMan worflow description used to test different
registration parameter settings for use in the atlas construction. The DAGMan
workflow can be directly submitted to the batch queuing system HTCondor for
distributed parallel execution. Alternatively, the workflow can be executed
sequentially on the local machine or submitted to another supported batch
queuing system (e.g., SLURM) using the run-workflow script.

Arguments:
  sublst   Text file with image IDs.
  refimg   Reference image used for global normalization.
  dagdir   Top-level directory for DAGMan workflow files.
  outdir   Top-level directory for workflow output files.

Options:
  -c, -config <config.sh>
      Custom configuration file. (default: none)
  -h, -help
      Print help and exit.
  -v, -verbose
      Enable verbose output messages.
HELP
}

# ==============================================================================
# configuration
# ==============================================================================

[ $# -ge 4 ] || {
  print_help
  exit 1
}

o=0
while [ $o -lt $# ]; do
  case "${!o}" in
    -c|-config)
      let a=o+1; optarg config ${!o} "${!a}";
      source "$config" || {
        error "Failed to load configuration from file: $config"
      }
      ;;
  esac
  let o++
done

_lbldir="$lbldir"
_lblpre="$lblpre"

lbldir="$(dirname  "$_lbldir/${_lblpre}id")"
lblpre="$(basename "$_lbldir/${_lblpre}id")"
lblpre="${lblpre:0:${#lblpre}-2}"

_clsdir="$lbldir"
_clspre="$clspre"

clsdir="$(dirname  "$_clsdir/${_clspre}id")"
clspre="$(basename "$_clsdir/${_clspre}id")"
clspre="${clspre:0:${#clspre}-2}"

verbose=0
sublst="$1"; shift
refimg="$1"; shift
dagdir="$1"; shift
outdir="$1"; shift
update=false

[ -n "$sublst" ] || error "Missing sublst argument!"
[ -n "$refimg" ] || error "Missing refimg argument!"
[ -n "$dagdir" ] || error "Missing dagdir argument!"
[ -n "$outdir" ] || error "Missing outdir argument!"
read_sublst subids "$sublst"

while [ $# -gt 0 ]; do
  case "$1" in
    -c|-config) shift; ;; # already loaded
    -u|-update) update=true; ;;
    -h|-help|--help) print_help; exit 0; ;;
    -v|-verbose) let verbose++; ;;
    *) error "Unknown argument: $1"; ;;
  esac
  shift
done

refdir="$(dirname "$refimg")"
refid="$(basename "$refimg")"
refpre=""
regex="(.*)((.nii|.hdr|.img)(.gz)?)$"
if [[ $refid =~ $regex ]]; then
  refid="${BASH_REMATCH[1]}"
  refsuf="${BASH_REMATCH[2]}"
else
  error "This workflow only supports NIfTI images!"
fi

log="$dagdir/progress.log"

# ==============================================================================
# auxiliary functions
# ==============================================================================

pbmap_name_to_tissue_labels()
{
  local labels=()
  case "$2" in
    csf) labels=(1); ;;
    wm) labels=(3); ;;
    cgm) labels=(2); ;;
    dgm) labels=(7 9); ;;
    vents) labels=(5); ;;
    bs_cb|bs+cb) labels=(6 8); ;;
  esac
  local "$1" && upvar $1 "${labels[@]}"
}

pairwise_registration_test()
{
  local name="$1"; shift
  local parent="$1"; shift

  begin_dag "$name" -parent "$parent"

    # perform pairwise test registrations
    register_node "register_images" \
        -subjects "${subids[@]}" \
        -imgdir   "$imgdir" \
        -imgpre   "$imgpre" \
        -imgsuf   "$imgsuf" \
        -bgvalue  "$bgvalue" \
        -hdrdofs  "$nrmdofs" \
        -dofins   "identity" \
        -dofdir   "$outdir/$name/dofs" \
        -domain   "$nrmdir/$nrmpre$nrmref$nrmsuf" \
        "$@"

    # transform intensity images to each subject
    transform_image_node "transform_images" -parent "register_images" \
        -subjects "${subids[@]}" \
        -imgdir   "$imgdir" \
        -imgpre   "$imgpre" \
        -imgsuf   "$imgsuf" \
        -refid    "$nrmref" \
        -refdir   "$nrmdir" \
        -refpre   "$nrmpre" \
        -refsuf   "$nrmsuf" \
        -hdrdofs  "$nrmdofs" \
        -dofins   "$outdir/$name/dofs" \
        -outdir   "$outdir/$name/images" \
        -padding  "$bgvalue" \
        -include_identity

    # evaluate overlap of segmentations
    transform_image_node "transform_labels" -parent "register_images" \
        -subjects "${subids[@]}" \
        -imgdir   "$lbldir" \
        -imgpre   "$lblpre" \
        -imgsuf   "$lblsuf" \
        -refid    "$nrmref" \
        -refdir   "$nrmdir" \
        -refpre   "$nrmpre" \
        -refsuf   "$nrmsuf" \
        -hdrdofs  "$nrmdofs" \
        -dofins   "$outdir/$name/dofs" \
        -outdir   "$outdir/$name/labels" \
        -include_identity -labels "all"

    evaluate_overlap_node "evaluate_overlap" -parent "transform_labels" \
        -subjects "${subids[@]}" \
        -imgdir   "$outdir/$name/labels" \
        -imgpre   "$lblpre" \
        -imgsuf   "$lblsuf" \
        -outdir   "$outdir/$name/overlap" \
        -metric   TP FP FN TN Sensitivity Specificity Precision Accuracy Dice Jaccard

    # transform images to average space
    average_dofs_node "average_dofs" -parent "register_images" \
        -subjects "${subids[@]}" \
        -dofins   "$outdir/$name/dofs" \
        -dofdir   "$outdir/$name/dofs/average"

    transform_image_node "transform_images_to_atlas" -parent "average_dofs" \
        -subjects "${subids[@]}" \
        -imgdir   "$imgdir" \
        -imgpre   "$imgpre" \
        -imgsuf   "$imgsuf" \
        -tgtid    "$nrmref" \
        -tgtdir   "$nrmdir" \
        -tgtpre   "$nrmpre" \
        -tgtsuf   "$nrmsuf" \
        -dofin1   "$nrmdofs" \
        -dofin2   "$outdir/$name/dofs/average" \
        -outdir   "$outdir/$name/images/atlas" \
        -padding  "$bgvalue" -invert

    transform_image_node "transform_tissue_labels_to_atlas" -parent "average_dofs" \
        -subjects "${subids[@]}" \
        -imgdir   "$clsdir" \
        -imgpre   "$clspre" \
        -imgsuf   "$clssuf" \
        -tgtid    "$nrmref" \
        -tgtdir   "$nrmdir" \
        -tgtpre   "$nrmpre" \
        -tgtsuf   "$nrmsuf" \
        -dofin1   "$nrmdofs" \
        -dofin2   "$outdir/$name/dofs/average" \
        -outdir   "$outdir/$name/labels/atlas" \
        -invert

    transform_image_node "transform_all_labels_to_atlas" -parent "average_dofs" \
        -subjects "${subids[@]}" \
        -imgdir   "$lbldir" \
        -imgpre   "$lblpre" \
        -imgsuf   "$lblsuf" \
        -tgtid    "$nrmref" \
        -tgtdir   "$nrmdir" \
        -tgtpre   "$nrmpre" \
        -tgtsuf   "$nrmsuf" \
        -dofin1   "$nrmdofs" \
        -dofin2   "$outdir/$name/dofs/average" \
        -outdir   "$outdir/$name/labels/atlas" \
        -invert

    # compute voxel-wise statistics of co-registered images
    aggregate_images_node "compute_mean" -parent "transform_images_to_atlas" \
        -subjects  "${subids[@]}" \
        -mode      "mean" \
        -imgdir    "$outdir/$name/images/atlas" \
        -imgpre    "$imgpre" \
        -imgsuf    "$imgsuf" \
        -output    "$outdir/$name/stats/mean.nii.gz" \
        -normalize "z-score" \
        -padding   "$bgvalue"

    aggregate_images_node "compute_sdev" -parent "transform_images_to_atlas" \
        -subjects  "${subids[@]}" \
        -mode      "sdev" \
        -imgdir    "$outdir/$name/images/atlas" \
        -imgpre    "$imgpre" \
        -imgsuf    "$imgsuf" \
        -output    "$outdir/$name/stats/sdev.nii.gz" \
        -normalize "z-score" \
        -padding   "$bgvalue"

    aggregate_images_node "compute_gini" -parent "transform_images_to_atlas" \
        -subjects  "${subids[@]}" \
        -mode      "gini" \
        -imgdir    "$outdir/$name/images/atlas" \
        -imgpre    "$imgpre" \
        -imgsuf    "$imgsuf" \
        -normalize "z-score" \
        -output    "$outdir/$name/stats/gini.nii.gz" \
        -padding   "$bgvalue"

    aggregate_images_node "compute_tissue_consistency" -parent "transform_tissue_labels_to_atlas" \
        -subjects  "${subids[@]}" \
        -mode      "label-consistency" \
        -imgdir    "$outdir/$name/labels/atlas" \
        -imgpre    "$clspre" \
        -imgsuf    "$clssuf" \
        -output    "$outdir/$name/stats/tissue-consistency.nii.gz"

    aggregate_images_node "compute_structure_consistency" -parent "transform_all_labels_to_atlas" \
        -subjects  "${subids[@]}" \
        -mode      "label-consistency" \
        -imgdir    "$outdir/$name/labels/atlas" \
        -imgpre    "$lblpre" \
        -imgsuf    "$lblsuf" \
        -output    "$outdir/$name/stats/structure-consistency.nii.gz"

    # compute probability maps of tissue ROIs
    for pbmap in csf wm cgm dgm vents bs+cb; do
      local labels=
      pbmap_name_to_tissue_labels labels $pbmap
      average_images_node "compute_pbmap_${pbmap/+/_}" -parent "average_dofs" \
          -subjects "${subids[@]}" \
          -refdir    "$nrmdir" \
          -refpre    "$nrmpre" \
          -refid     "$nrmref" \
          -refsuf    "$nrmsuf" \
          -imgdir    "$clsdir" \
          -imgpre    "$clspre" \
          -imgsuf    "$clssuf" \
          -dofin1    "$nrmdofs" \
          -dofin2    "$outdir/$name/dofs/average" \
          -output    "$outdir/$name/pbmaps/$pbmap.nii.gz" \
          -labels    "${labels[@]}" \
          -rescale   "0 100" \
          -dtype     "uchar"
    done


  end_dag
}

# ==============================================================================
# workflow
# ==============================================================================

begin_dag "pairwise-registration-tests" -dagfile "$dagdir/all_tests.dag" -dagdir "$dagdir"

  dofdir="$outdir/global/dofs"

  # ----------------------------------------------------------------------------
  # global normalization (translation, rotation, and scale)
  begin_dag "normalization" -splice

      register_node "rigid" \
          -subjects "${subids[@]}" \
          -tgtid    "$refid" \
          -tgtdir   "$refdir" \
          -tgtpre   "$refpre" \
          -tgtsuf   "$refsuf" \
          -imgdir   "$imgdir" \
          -imgpre   "$imgpre" \
          -imgsuf   "$imgsuf" \
          -dofdir   "$dofdir/1.1_sim" \
          -model    "Similarity" \
          -interp   "$interpolation" \
          -sim      "NMI" \
          -bins     "64" \
          -bgvalue  "$bgvalue" \
          -inclbg   true \
          -maxres   "$resolution" \
          -segdir   "$segdir" \
          -segmsk   "bs+cb" .33 \
          -levels   4 2

      register_node "affine" -parent "rigid" \
          -subjects "${subids[@]}" \
          -tgtid    "$refid" \
          -tgtdir   "$refdir" \
          -tgtpre   "$refpre" \
          -tgtsuf   "$refsuf" \
          -imgdir   "$imgdir" \
          -imgpre   "$imgpre" \
          -imgsuf   "$imgsuf" \
          -dofins   "$dofdir/1.1_sim" \
          -dofdir   "$dofdir/1.2_aff" \
          -model    "Affine" \
          -par      "Allow shearing" No \
          -interp   "$interpolation" \
          -sim      "NMI" \
          -bins     "64" \
          -bgvalue  "$bgvalue" \
          -maxres   "$resolution" \
          -levels   3 1

      invert_dof_node "invert" -parent "affine" \
          -subjects "${subids[@]}" \
          -dofins   "$dofdir/1.2_aff" \
          -dofdir   "$dofdir/1.3_ref"

      nrmdofs="$dofdir/1.3_ref"

  end_dag

  # ----------------------------------------------------------------------------
  # generate population specific reference image/mask
  nrmdir="$outdir/global/average"
  nrmref="linear"
  nrmpre=""
  nrmsuf=".nii.gz"

  average_images_node "make_average" -parent "normalization" \
      -subjects  "${subids[@]}" \
      -refdir    "$refdir" \
      -refpre    "$refpre" \
      -refid     "$refid" \
      -refsuf    "$refsuf" \
      -imgdir    "$imgdir" \
      -imgpre    "$imgpre" \
      -imgsuf    "$imgsuf" \
      -dofdir    "$nrmdofs" \
      -output    "$nrmdir/$nrmpre$nrmref$nrmsuf" \
      -spacing   "$resolution" \
      -padding   "$bgvalue" \
      -normalize "zscore" \
      -rescale   "0 100" \
      -sharpen   "yes" \
      -margin    5

  # last test id / counter
  i=0

  # ----------------------------------------------------------------------------
  # initial pairwise registration tests with different regularization weights  
  mffd='None'
  model='SVFFD'
  spacing=2.5
  symmetric=true
  bins=64
  radius=3
  interp='Linear with padding'
  inclbg=false

  sim='nmi'
  for bending  in 5e-2 1e-2 5e-3 1e-3 1e-4; do
  for jacobian in 1e-3 5e-4 1e-4 1e-5 0e-0; do

    let i++
    name="test_$(printf %03d $i)"
    echo "$name: mffd=$mffd, model=$model, sym=$symmetric, sim=$sim, bins=$bins, radius=$radius, ds=$spacing, be=$bending, jl=$jacobian, inclbg=$inclbg, interp=$interp"
    pairwise_registration_test "$name" "make_average" \
        -model "$model" \
        -mffd "$mffd" \
        -similarity "$sim" \
        -bins "$bins" \
        -radius "$radius" \
        -spacing "$spacing" \
        -bending "$bending" \
        -jacobian "$jacobian" \
        -symmetric "$symmetric" \
        -interp "$interp" \
        -inclbg "$inclbg"

  done; done

  sim='ncc'
  for bending  in 5e-2 1e-2 5e-3 1e-3; do
  for jacobian in 1e-3 1e-4 1e-5 0e-0; do

    let i++
    name="test_$(printf %03d $i)"
    echo "$name: mffd=$mffd, model=$model, sym=$symmetric, sim=$sim, bins=$bins, radius=$radius, ds=$spacing, be=$bending, jl=$jacobian, inclbg=$inclbg, interp=$interp"
    pairwise_registration_test "$name" "make_average" \
        -model "$model" \
        -mffd "$mffd" \
        -similarity "$sim" \
        -bins "$bins" \
        -radius "$radius" \
        -spacing "$spacing" \
        -bending "$bending" \
        -jacobian "$jacobian" \
        -symmetric "$symmetric" \
        -interp "$interp" \
        -inclbg "$inclbg"

  done; done

  sim='nmi'
  for bending  in 1e-2 5e-3; do
  for jacobian in 5e-5 5e-6 1e-6; do

    let i++
    name="test_$(printf %03d $i)"
    echo "$name: mffd=$mffd, model=$model, sym=$symmetric, sim=$sim, bins=$bins, radius=$radius, ds=$spacing, be=$bending, jl=$jacobian, inclbg=$inclbg, interp=$interp"
    pairwise_registration_test "$name" "make_average" \
        -model "$model" \
        -mffd "$mffd" \
        -similarity "$sim" \
        -bins "$bins" \
        -radius "$radius" \
        -spacing "$spacing" \
        -bending "$bending" \
        -jacobian "$jacobian" \
        -symmetric "$symmetric" \
        -interp "$interp" \
        -inclbg "$inclbg"

  done; done

  # ----------------------------------------------------------------------------
  # different NMI #bins, regularization weights based on initial tests
  sim='nmi'
  bending=5e-3
  jacobian=1e-5
  for bins in 32 48 80 96 112 128 144 160; do
    let i++
    name="test_$(printf %03d $i)"
    echo "$name: mffd=$mffd, model=$model, sym=$symmetric, sim=$sim, bins=$bins, radius=$radius, ds=$spacing, be=$bending, jl=$jacobian, inclbg=$inclbg, interp=$interp"
    pairwise_registration_test "$name" "make_average" \
        -model "$model" \
        -mffd "$mffd" \
        -similarity "$sim" \
        -bins "$bins" \
        -radius "$radius" \
        -spacing "$spacing" \
        -bending "$bending" \
        -jacobian "$jacobian" \
        -symmetric "$symmetric" \
        -interp "$interp" \
        -inclbg "$inclbg"
  done

  # ----------------------------------------------------------------------------
  # different NCC window size, regularization weights based on initial tests
  sim='ncc'
  bending=1e-2
  jacobian=0e-0
  for radius in 0 1 2 4 5; do
    let i++
    name="test_$(printf %03d $i)"
    echo "$name: mffd=$mffd, model=$model, sym=$symmetric, sim=$sim, bins=$bins, radius=$radius, ds=$spacing, be=$bending, jl=$jacobian, inclbg=$inclbg, interp=$interp"
    pairwise_registration_test "$name" "make_average" \
        -model "$model" \
        -mffd "$mffd" \
        -similarity "$sim" \
        -bins "$bins" \
        -radius "$radius" \
        -spacing "$spacing" \
        -bending "$bending" \
        -jacobian "$jacobian" \
        -symmetric "$symmetric" \
        -interp "$interp" \
        -inclbg "$inclbg"
  done

  # ----------------------------------------------------------------------------
  # find best parameters for FFD model (method of Serag et al.)
  mffd='Sum'
  model='Affine+FFD'
  spacing=2.5
  symmetric=false
  sim='nmi'
  bins=64
  interp='Linear with padding'
  inclbg=false
  jacobian=0
  radius=0

  for bending in 1e-2 5e-2 1e-3 5e-3 1e-4 5e-4 1e-5 5e-5 1e-6; do

    let i++
    name="test_$(printf %03d $i)"
    echo "$name: mffd=$mffd, model=$model, sym=$symmetric, sim=$sim, bins=$bins, radius=$radius, ds=$spacing, be=$bending, jl=$jacobian, inclbg=$inclbg, interp=$interp"
    pairwise_registration_test "$name" "make_average" \
        -model "$model" \
        -mffd "$mffd" \
        -similarity "$sim" \
        -bins "$bins" \
        -radius "$radius" \
        -spacing "$spacing" \
        -bending "$bending" \
        -jacobian "$jacobian" \
        -symmetric "$symmetric" \
        -interp "$interp" \
        -inclbg "$inclbg"

  done

  # ----------------------------------------------------------------------------
  # reduce BE weight for NCC even further than before
  sim='ncc'
  for bending  in 1e-1; do
  for jacobian in 1e-3 1e-4 1e-5 0e-0; do

    let i++
    name="test_$(printf %03d $i)"
    echo "$name: mffd=$mffd, model=$model, sym=$symmetric, sim=$sim, bins=$bins, radius=$radius, ds=$spacing, be=$bending, jl=$jacobian, inclbg=$inclbg, interp=$interp"
    pairwise_registration_test "$name" "make_average" \
        -model "$model" \
        -mffd "$mffd" \
        -similarity "$sim" \
        -bins "$bins" \
        -radius "$radius" \
        -spacing "$spacing" \
        -bending "$bending" \
        -jacobian "$jacobian" \
        -symmetric "$symmetric" \
        -interp "$interp" \
        -inclbg "$inclbg"

  done; done

end_dag
exit 0

  # ----------------------------------------------------------------------------
  # different model with similarity measure and regularization weights based on preceeding tests
  spacing=2.5
  radius=5
  bins=64
  interp='Linear with padding'
  inclbg=false

  symmetric=true
  for sim in 'nmi' 'ncc'; do

    if [[ $sim == 'nmi' ]]; then
      bending=1e-4
      jacobian=1e-5
    else
      bending=1e-2
      jacobian=1e-6
    fi

    for model in None:Affine+SVFFD LogSum:Affine+SVFFD; do
      mffd=${model/:*}
      model=${model/*:}

      let i++
      name="test_$(printf %03d $i)"
      echo "$name: mffd=$mffd, model=$model, sym=$symmetric, sim=$sim, bins=$bins, radius=$radius, ds=$spacing, be=$bending, jl=$jacobian, inclbg=$inclbg, interp=$interp"
      pairwise_registration_test "$name" "make_average" \
          -model "$model" \
          -mffd "$mffd" \
          -similarity "$sim" \
          -bins "$bins" \
          -radius "$radius" \
          -spacing "$spacing" \
          -bending "$bending" \
          -jacobian "$jacobian" \
          -symmetric "$symmetric" \
          -interp "$interp" \
          -inclbg "$inclbg"
    done
  done

  symmetric=false
  for sim in 'nmi' 'ncc'; do

    if [[ $sim == 'nmi' ]]; then
      bending=1e-4
      jacobian=1e-5
    else
      bending=1e-2
      jacobian=1e-6
    fi

    for model in None:Affine+SVFFD LogSum:Affine+SVFFD Sum:Affine+SVFFD Sum:Affine+FFD; do
      mffd=${model/:*}
      model=${model/*:}

      let i++
      name="test_$(printf %03d $i)"
      echo "$name: mffd=$mffd, model=$model, sym=$symmetric, sim=$sim, bins=$bins, radius=$radius, ds=$spacing, be=$bending, jl=$jacobian, inclbg=$inclbg, interp=$interp"
      pairwise_registration_test "$name" "make_average" \
          -model "$model" \
          -mffd "$mffd" \
          -similarity "$sim" \
          -bins "$bins" \
          -radius "$radius" \
          -spacing "$spacing" \
          -bending "$bending" \
          -jacobian "$jacobian" \
          -symmetric "$symmetric" \
          -interp "$interp" \
          -inclbg "$inclbg"
    done
  done

  # ----------------------------------------------------------------------------
  # include background in downsampling, interpolation, and similarity

  mffd='None'
  model='SVFFD'
  spacing=2.5
  symmetric=true
  bins=64
  radius=5
  interp='Linear'
  inclbg=true

  for sim in 'nmi' 'ncc'; do
  for bending  in 1e-2 5e-3 1e-3 1e-4 1e-5; do
  for jacobian in 0 1e-3 1e-4 1e-5 1e-6; do

    let i++
    name="test_$(printf %03d $i)"
    echo "$name: mffd=$mffd, model=$model, sym=$symmetric, sim=$sim, bins=$bins, radius=$radius, ds=$spacing, be=$bending, jl=$jacobian, inclbg=$inclbg, interp=$interp"
    pairwise_registration_test "$name" "make_average" \
        -model "$model" \
        -mffd "$mffd" \
        -similarity "$sim" \
        -bins "$bins" \
        -radius "$radius" \
        -spacing "$spacing" \
        -bending "$bending" \
        -jacobian "$jacobian" \
        -symmetric "$symmetric" \
        -interp "$interp" \
        -inclbg "$inclbg"

  done; done; done

end_dag
