#! /bin/bash

appid="$(basename "$0")"
appdir="$(cd "$(dirname "$BASH_SOURCE")" && pwd)"
appdir="$(cd "$appdir/.." && pwd)"

source "$appdir/lib/daggen/mirtk.sh" || {
  echo "Failed to import daggen/mirtk module!" 1>&2
  exit 1
}

# ==============================================================================
# help
# ==============================================================================

# ------------------------------------------------------------------------------
print_help()
{
  cat <<HELP

usage: $(basename "$0") [options]

This script generates the DAGMan application for the generation of a
consistent brain atlas and growth model for submission to the batch
queuing system HTCondor for distributed parallel execution.

Options:
  -s -sublst <sub.lst>     Text file listing the IDs of the images
                           to use for the atlas construction. If not
                           specified, the IDs are read from the -agelst.
                           (default: $appdir/etc/sub.lst)

  -a -agelst <age.csv>     Comma/space-separated CSV file, where the
                           first column contains the image ID and the
                           second column the associated age.
                           (default: $appdir/etc/age.csv)

  -c -config <config.sh>   Configuration file.
                           (default: $appdir/etc/config.sh)

  -u -update               Overwrite existing DAGMan files.
  -h -help                 Print help and exit.
  -v -verbose              Enable verbose output messages.
HELP
}

# ==============================================================================
# configuration
# ==============================================================================

verbose=0
sublst=
agelst="$appdir/etc/age.csv"
config="$appdir/etc/config.sh"
sigma=

o=0
while [ $o -lt $# ]; do
  case "${!o}" in
    -c|-config) let a=o+1; optarg config ${!o} "${!a}"; ;;
    -sigma)     let a=o+1; optarg sigma  ${!o} "${!a}"; ;;
  esac
  let o++
done
source "$config"  || error "Failed to load configuration from file: $config"

while [ $# -gt 0 ]; do
  case "$1" in
    -s|-sublst)      optarg sublst $1 "$2"; shift; ;;
    -a|-agelst)      optarg agelst $1 "$2"; shift; ;;
    -u|-update)      update='true'; ;;
    -c|-config)      shift; ;; # already loaded
    -h|-help|--help) print_help; exit 0; ;;
    -v|-verbose)     let verbose++; ;;
    -*)              error "Unknown option: $1"; ;;
    *)               if   [ -z "$agelst" ]; then agelst="$1"
                     elif [ -z "$sublst" ]; then sublst="$1"
                     else error "Too many arguments: $1"
                     fi; ;;
  esac
  shift
done

if [ -z "$agelst" ]; then
  error "Missing CSV file with subject IDs and corresponding ages!"
fi
if [ -z "$sublst" ]; then
  sublst="$appdir/etc/sub.lst"
  [ -f "$sublst" ] || sublst="$agelst"
fi
read_sublst subids "$sublst"

cd "$topdir" || { echo "Failed to change to working directory!" 1>&2; exit 1; }

# atlas time points for which kernel was create either manually,
# with another tool (e.g. MATLAB), or using the "kernel" shell script
timepoints=($(ls "$kernel/" | awk '{
  if ($0 ~ /weights_t=[0-9]+(.[0-9]+)?.csv/) {
    print gensub(/weights_t=([0-9.]+(.[0-9]+)?).csv/, "\\1", "g")
  }
}'))
if [ ${#timepoints} -eq 0 ]; then
  error "No regression kernels matching pattern \"$kernel/weights_t=*.csv\" found"
fi

# ==============================================================================
# workflow
# ==============================================================================

begin_dag 'brainatlas' -dagfile "$dagdir/main.dag" -dagdir "$dagdir"

  # ----------------------------------------------------------------------------
  # global normalization (translation, rotation, and scale)
  begin_dag 'alignment' -splice

    if [ -n "$refid" ]; then

      # initialize transformations
      register_node 'initial' \
          -dofdir   "$dofdir/1.1_sim" \
          -refid    "$refid" \
          -refdir   "$refdir" \
          -subjects "${subids[@]}" \
          -model    "Similarity" \
          -sim      "$similarity" \
          -bgvalue  "$bgvalue" \
          -maxres   $resolution \
          -segdir   "$segdir" \
          -segssd   'BS+CB' .33 \
          -levels   4 2

      # affine registration
      register_node 'affine' -parent 'initial' \
          -dofins   "$dofdir/1.1_sim" \
          -dofdir   "$dofdir/1.2_aff" \
          -refid    "$refid" \
          -refdir   "$refdir" \
          -subjects "${subids[@]}" \
          -model    "Affine" \
          -par      "Allow shearing" No \
          -sim      "$similarity" \
          -bgvalue  "$bgvalue" \
          -maxres   $resolution \
          -levels   3 1

      # global normalization output
      affdofs="$dofdir/1.2_aff/$refid"

    else

      # initialize transformations
      register_node 'initial' \
          -model    "Similarity" \
          -sim      "$similarity" \
          -subjects "${subids[@]}" \
          -dofdir   "$dofdir/1.1_sim" \
          -maxres   $resolution \
          -segdir   "$segdir" \
          -segssd   'BS+CB' .5 \
          -levels   4

      # affine registration
      register_node 'affine' -parent 'initial' \
          -model    "Affine" \
          -par      "Allow shearing" No \
          -sim      "$similarity" \
          -subjects "${subids[@]}" \
          -bgvalue  "$bgvalue" \
          -dofins   "$dofdir/1.1_sim" \
          -dofdir   "$dofdir/1.2_aff" \
          -maxres   $resolution \
          -levels   3

      # average dofs
      dofaverage_node 'avgdof' -parent 'affine' \
          -subjects "${subids[@]}" \
          -dofins   "$dofdir/1.2_aff" \
          -dofdir   "$dofdir/1.3_avg"

      # affine refinement
      register_node 'refine' -parent 'avgdof' \
          -model    "Affine" -par "Allow shearing = No" \
          -sim      "$similarity" \
          -subjects "${subids[@]}" \
          -bgvalue  "$bgvalue" \
          -hdrdofs  "$dofdir/1.3_avg" \
          -dofdir   "$dofdir/1.4_res" \
          -maxres   $resolution \
          -levels   2

      # average dofs
      dofaverage_node 'avgres' -parent 'refine' \
          -subjects "${subids[@]}" \
          -dofins   "$dofdir/1.4_res" \
          -dofdir   "$dofdir/1.5_avg"

      # compose average dofs
      compose_node 'compose' -parent 'avgres' \
          -subjects "${subids[@]}" \
          -dofdir1  "$dofdir/1.3_avg" \
          -dofdir2  "$dofdir/1.5_avg" \
          -dofdir3  "$dofdir/1.6_aff"

      # global normalization output
      affdofs="$dofdir/1.6_aff"

    fi

  end_dag

  # ----------------------------------------------------------------------------
  # generate initial (affine) average image used as reference mask
  if [ -n "$refid" ]; then
    refopt=(-reference "$refdir/$refpre$refid$refsuf")
  else
    refopt=()
  fi
  average_node 'reference' -parent 'alignment' \
      -subjects "${subids[@]}" -imgdir "$imgdir" -imgsuf '.nii.gz' \
      -hdrdofs "$affdofs" -output "$outdir/linavg.nii.gz" \
      -voxelwise -bgvalue "$bgvalue" -margin 5 -resolution $resolution \
      "${refopt[@]}"

  # ----------------------------------------------------------------------------
  # compute cross-sectional FFDs for each time point between each pair of images
  #
  # TODO: Use only subset of images for this stage when iterative template
  #       refinement is used in the next stage, i.e., use only first n images
  #       of each temporal kernel, merge, and remove duplicates.
  begin_dag 'avgffds' -parent 'reference' -splice

    # deformable registration
    register_node 'pairwise' \
        -symmetric -model SVFFD -mffd None -ds 2.5 -be 1e-3 -jl 1e-2 \
        -sim "$similarity" -par "Maximum streak of rejected steps" 2 \
        -subjects "${subids[@]}" -bgvalue "$bgvalue" \
        -hdrdofs "$affdofs" -dofins Id -dofdir "$dofdir/2.1_ffd" \
        -mask "$outdir/linavg.nii.gz" -levels 4

    # average deformations
    curffds="$dofdir/2.2_avg"
    for t in ${timepoints[@]}; do

      dofaverage_node "avgffd_$t" -parent 'pairwise' \
          -doflst "$kernel/weights_t=$t.csv" \
          -dofins "$dofdir/2.1_ffd" \
          -dofdir "$curffds/t=$t" \
          -dofs

    done

    prev_node='avgffds'

  end_dag

  # ----------------------------------------------------------------------------
  # make template images with optional iterative refinement
  #
  # 1. Update average image
  # 2. Register all images to average image
  # 3. Repeat a number of times (TODO: or until average image barely changes)
  begin_dag 'templates' -parent 'avgffds' -splice

    step=0
    [ $refine -ge 0 ] || refine=0
    while [ $step -le $refine ]; do
      let i="$step + 1"

      curdofs="$dofdir/4.${i}_a+d"
      begin_dag "average_$i" -parent "$prev_node" -splice
        for t in ${timepoints[@]}; do

          compose_node "compose_$t" -parent "avgffd_$t" \
              -sublst  "$kernel/weights_t=$t.csv" \
              -dofdir1 "$affdofs" -dofdir2 "$curffds/t=$t" -dofdir3 "$curdofs/t=$t"

          average_node "average_$t" -parent "compose_$t" \
              -sublst "$kernel/weights_t=$t.csv" -imgdir "$imgdir" -imgsuf '.nii.gz' \
              -dofdir "$curdofs/t=$t" -output "$outdir/template/t2w_$t-$i.nii.gz" \
              -voxelwise

        done
      end_dag

      prev_node="average_$i"
      [ $step -lt $refine ] || break
      nxtffds="$dofdir/3.${i}_ffd"

      begin_dag "register_$i" -parent "$prev_node" -splice
        for t in ${timepoints[@]}; do
          register_node "refine_$t" \
              -model SVFFD -mffd None -ds 2.5 -be 1e-3 -jl 1e-2 \
              -sim "$similarity" -par "Maximum streak of rejected steps" 2 \
              -refdir "$outdir/template" -refid "t2w_$t-$i" \
              -subjects "${subids[@]}" -bgvalue "$bgvalue" \
              -hdrdofs "$affdofs" -dofins "$curffds" -dofdir "$nxtffds"
        done
      end_dag

      prev_node="register_$i"
      curffds="$nxtffds"
      unset -v nxtffds

      let step++
    done
    unset -v parent step i prev_node

  end_dag

  # ----------------------------------------------------------------------------
  # make tissue probability maps
  if [ -n "$lbldir" -a -d "$lbldir/tissues" ]; then
    begin_dag 'tissues' -parent 'templates' -splice

      for t in ${timepoints[@]}; do
        l=1
        while [ $l -le $tissues ]; do

          average_node "tissue_${l}_${t}" \
              -voxelwise -label $l -sublst "$kernel/weights_t=$t.csv" \
              -imgdir "$lbldir/tissues" -imgsuf "$lblsuf" -dofdir "$curdofs/t=$t" \
              -output "$outdir/pbmaps/$t/tissue_$l.nii.gz"
   
          let l++
        done
      done

    end_dag
  fi

  # ----------------------------------------------------------------------------
  # make structural probability maps
  if [ -n "$lbldir" -a -d "$lbldir/structures" ]; then
    begin_dag 'structures' -parent 'templates' -splice

      for t in ${timepoints[@]}; do
        l=1
        while [ $l -le $structures ]; do

          average_node "structure_${l}_${t}" \
              -voxelwise -label $l -sublst "$kernel/weights_t=$t.csv" \
              -imgdir "$lbldir/structures" -imgsuf "$lblsuf" -dofdir "$curdofs/t=$t" \
              -output "$outdir/pbmaps/$t/structure_$l.nii.gz"
   
          let l++
        done
      done

    end_dag
  fi

  # ----------------------------------------------------------------------------
  # construct longitudinal growth model
  #begin_dag 'growth' -parent 'avgffds' -splice
    # TODO
  #end_dag
 
end_dag
