#! /bin/bash

appid="$(basename "$0")"
appdir="$(cd "$(dirname "$BASH_SOURCE")" && pwd)"
appdir="$(cd "$appdir/.." && pwd)"

source "$appdir/lib/daggen/mirtk.sh" || {
  echo "Failed to import daggen/mirtk module!" 1>&2
  exit 1
}

# ==============================================================================
# help
# ==============================================================================

# ------------------------------------------------------------------------------
print_help()
{
  cat <<HELP

usage: $appid [options]

This script generates the DAGMan worflow description for the generation
of a spatio-temporal brain atlas using pairwise registrations. The workflow can
be directly submitted to the batch queuing system HTCondor for distributed
parallel execution. Alternatively, the workflow can be executed sequentially on
the local machine or submitted to another supported batch queuing system, i.e.,
SLURM using the bin/run-workflow script.

Options:
  -c, -config <config.sh>
      Custom configuration file. (default: none)
  -a, -agelst <age.csv>
      Comma/space-separated CSV file, where the first column contains
      the image ID and the second column the associated age.
      (default: $agelst)
  -s, -sublst <sub.lst>
      Text file listing the IDs of the images to use for the atlas construction.
      If not specified, the IDs are read from the -agelst.
      (default: $sublst)
  -t <t1>...
      Time points for which to construct an atlas.
      (default: all time points found in $kernel/ directory)
  -sigma, -stdev <value>
      Standard deviation of temporal Gaussian kernels.
      This value is set before the configuration is loaded.
      It will only have an effect if the configuration file does
      not override it, unless the 'sigma' variable is not set.
  -u, -update
      Overwrite existing DAGMan files.
  -h, -help
      Print help and exit.
  -v, -verbose
      Enable verbose output messages.
HELP
}

# ==============================================================================
# configuration
# ==============================================================================

# sigma value specified as command argument
# Note: Only used when not overridden by configuration file.
sigma=
o=0
while [ $o -lt $# ]; do
  case "${!o}" in
    -stdev|-sigma)
      let a=o+1
      optarg sigma ${!o} "${!a}";
      ;;
  esac
  let o++
done

# load default configuration (including etc/config/custom.sh if present)
source "$appdir/etc/config/default.sh" || {
  error "Failed to load default configuration"
}

# load custom configuration
o=0
while [ $o -lt $# ]; do
  case "${!o}" in
    -c|-config)
      let a=o+1; optarg config ${!o} "${!a}";
      source "$config" || {
        error "Failed to load configuration from file: $config"
      }
      ;;
  esac
  let o++
done

[ -z "$agelst" ] || agelst="$topdir/$agelst"
[ -z "$sublst" ] || sublst="$topdir/$sublst"

# atlas time points for which kernel was create either manually,
# with another tool (e.g. MATLAB), or using the "kernel" shell script
if [ ! -d "$topdir/$kernel/" ]; then
  error "Missing regression kernels directory:\n$topdir/$kernel"
fi
timepoints=($(ls "$topdir/$kernel/" | awk "{
  if (\$0 ~ /$krnpre[0-9]+(\\.[0-9]+)?\\.$krnext/) {
    print gensub(/$krnpre([0-9.]+(\\.[0-9]+)?)\\.$krnext/, \"\\\\1\", \"g\")
  }
}"))
if [ ${#timepoints[@]} -eq 0 ]; then
  error "No regression kernels matching pattern \"$krnpre([0-9.]+(\\.[0-9]+)?)\\.$krnext\" found in:\n$topdir/$kernel"
fi

# parse remaining options
while [ $# -gt 0 ]; do
  case "$1" in
    -s|-sublst) optarg sublst $1 "$2"; shift; ;;
    -a|-agelst) optarg agelst $1 "$2"; shift; ;;
    -t|-timepoints)
      timepoints=()
      optargs timepoints "$@"
      shift ${#timepoints[@]}
      ;;
    -u|-update) update='true'; ;;
    -c|-config) shift; ;; # already loaded
    -stdev|-sigma) shift; ;; # already set
    -h|-help|--help) print_help; exit 0; ;;
    -v|-verbose) let verbose++; ;;
    *) error "Unknown argument: $1"; ;;
  esac
  shift
done

# read subject IDs
if [ -z "$agelst" ] || [ ! -f "$agelst" ]; then
  error "Missing CSV file with subject IDs and corresponding ages!"
fi
[ -n "$sublst" ] || sublst="$agelst"
read_sublst subids "$sublst"

# change to working directory
cd "$topdir" || error "Failed to change to working directory!"

if [ $verbose -gt 0 ]; then
  if [ -n "$mirtk" ]; then
    echo "MIRTK AppImage binary       = $mirtk"
  else
    echo "MIRTK installation prefix   = $MIRTK_DIR"
  fi
  echo "No. of subjects/images      = ${#subids[@]}"
  echo "Atlas time points           = ${timepoints[@]}"
  echo "Temporal kernel sigma       = $sigma"
  echo "Temporal kernel weights     = $kernel"
  echo "Update existing workflow    = $update"
fi

# ==============================================================================
# workflow
# ==============================================================================

begin_dag 'brainatlas' -dagfile "$dagdir/main.dag" -dagdir "$dagdir"

  # ----------------------------------------------------------------------------
  # global normalization (translation, rotation, and scale)
  begin_dag 'aff_alignment' -splice

    if [[ $refini == false ]] && [ -n "$refid" ]; then

      # initialize transformations
      register_node 'align' \
          -subjects "${subids[@]}" \
          -tgtid    "$refid" \
          -tgtdir   "$refdir" \
          -tgtpre   "$refpre" \
          -tgtsuf   "$refsuf" \
          -imgdir   "$imgdir" \
          -imgpre   "$imgpre" \
          -imgsuf   "$imgsuf" \
          -dofdir   "$dofdir/1.1_ini" \
          -model    "Similarity" \
          -interp   "$interpolation" \
          -sim      "$similarity" \
          -bins     "$bins" \
          -radius   "$radius" \
          -bgvalue  "$bgvalue" \
          -inclbg   true \
          -maxres   "$resolution" \
          -segdir   "$segdir" \
          -segmsk   "bs+cb" .33 \
          -maxstep  1 \
          -levels   4 2

      # affine registration
      register_node 'regref' -parent 'align' \
          -subjects "${subids[@]}" \
          -tgtid    "$refid" \
          -tgtdir   "$refdir" \
          -tgtpre   "$refpre" \
          -tgtsuf   "$refsuf" \
          -imgdir   "$imgdir" \
          -imgpre   "$imgpre" \
          -imgsuf   "$imgsuf" \
          -dofins   "$dofdir/1.1_ini" \
          -dofdir   "$dofdir/1.2_ref" \
          -model    "Affine" \
          -par      "Allow shearing" No \
          -interp   "$interpolation" \
          -sim      "$similarity" \
          -bins     "$bins" \
          -radius   "$radius" \
          -bgvalue  "$bgvalue" \
          -maxres   "$resolution" \
          -maxstep  1 \
          -levels   3 1 \

      # invert reference to subject transformations
      invert_dof_node "invert" -parent "regref" \
          -subjects "${subids[@]}" \
          -dofins   "$dofdir/1.2_ref" \
          -dofdir   "$dofdir/1.3_inv"

      # global normalization output
      nrmdofs="$dofdir/1.3_inv"

    else

      # initialize pairwise transformations
      if [ -n "$refid" ]; then

        register_node 'regref' \
          -subjects "${subids[@]}" \
          -tgtid    "$refid" \
          -tgtdir   "$refdir" \
          -tgtpre   "$refpre" \
          -tgtsuf   "$refsuf" \
          -imgdir   "$imgdir" \
          -imgpre   "$imgpre" \
          -imgsuf   "$imgsuf" \
          -dofdir   "$dofdir/1.1_ref" \
          -model    "Similarity" \
          -interp   "$interpolation" \
          -sim      "$similarity" \
          -bins     "$bins" \
          -radius   "$radius" \
          -bgvalue  "$bgvalue" \
          -inclbg   true \
          -maxres   "$resolution" \
          -segdir   "$segdir" \
          -segmsk   "bs+cb" .33 \
          -maxstep  1 \
          -levels   4 2 \
          -group    20

        invert_dof_node "invref" -parent "regref" \
          -subjects "${subids[@]}" \
          -dofins   "$dofdir/1.1_ref" \
          -dofdir   "$dofdir/1.1_inv"

        prev_node="invref"
        nrmdofs="$dofdir/1.1_inv"
        dofins="identity"

      else

        register_node "regini" \
            -subjects "${subids[@]}" \
            -imgdir   "$imgdir" \
            -imgpre   "$imgpre" \
            -imgsuf   "$imgsuf" \
            -dofdir   "$dofdir/1.1_sim" \
            -model    "Similarity" \
            -interp   "$interpolation" \
            -sim      "$similarity" \
            -bins     "$bins" \
            -radius   "$radius" \
            -bgvalue  "$bgvalue" \
            -inclbg   true \
            -maxres   "$resolution" \
            -segdir   "$segdir" \
            -segmsk   "bs+cb" .33 \
            -levels   4 2 \
            -maxstep  1 \
            -group    100

        prev_node="regini"
        nrmdofs=""
        dofins="$dofdir/1.1_sim"

      fi

      # pairwise affine registration
      register_node "regaff" -parent "$prev_node" \
          -subjects "${subids[@]}" \
          -imgdir   "$imgdir" \
          -imgpre   "$imgpre" \
          -imgsuf   "$imgsuf" \
          -hdrdofs  "$nrmdofs" \
          -dofins   "$dofins" \
          -dofdir   "$dofdir/1.2_aff" \
          -model    "Affine" \
          -par      "Allow shearing" No \
          -interp   "$interpolation" \
          -sim      "$similarity" \
          -bins     "$bins" \
          -radius   "$radius" \
          -bgvalue  "$bgvalue" \
          -maxres   "$resolution" \
          -maxstep  1 \
          -levels   3 1 \
          -group    100

      # average pairwise transformations
      average_dofs_node "avgdofs" -parent "regaff" \
          -subjects "${subids[@]}" \
          -dofins   "$dofdir/1.2_aff" \
          -dofdir   "$dofdir/1.2_aff/average" \
          -noshearing

      # compose current -hdrdofs with average transformations
      if [ -n "$nrmdofs" ]; then
        prev_node="compaff"
        compose_dofs_node "$prev_node" -parent "avgdofs" \
            -subjects "${subids[@]}" \
            -dofin1   "$nrmdofs" \
            -dofin2   "$dofdir/1.2_aff/average" \
            -dofdir   "$dofdir/1.2_aff/composite" \
            -noshearing
        nrmdofs="$dofdir/1.2_aff/composite"
      else
        prev_node="avgdofs"
        nrmdofs="$dofdir/1.2_aff/average"
      fi

      # pairwise affine refinement
      register_node "refine" -parent "$prev_node" \
          -subjects "${subids[@]}" \
          -imgdir   "$imgdir" \
          -imgpre   "$imgpre" \
          -imgsuf   "$imgsuf" \
          -hdrdofs  "$nrmdofs" \
          -dofins   "identity" \
          -dofdir   "$dofdir/1.3_res" \
          -model    "Affine" \
          -par      "Allow shearing" No \
          -interp   "$interpolation" \
          -sim      "$similarity" \
          -bins     "$bins" \
          -radius   "$radius" \
          -bgvalue  "$bgvalue" \
          -maxres   "$resolution" \
          -maxstep  1 \
          -levels   2 \
          -group    100

      # average pairwise transformations
      average_dofs_node "avgres" -parent "refine" \
          -subjects "${subids[@]}" \
          -dofins   "$dofdir/1.3_res" \
          -dofdir   "$dofdir/1.3_res/average" \
          -noshearing

      # compose current -hdrdofs with average transformations
      dofin1="$nrmdofs"
      if [ -n "$refid" ]; then
        nrmdofs="$dofdir/1.3_res/composite"
      else
        nrmdofs="$dofdir/1.4_ref"
      fi
      compose_dofs_node "compres" -parent "avgres" \
          -subjects "${subids[@]}" \
          -dofin1   "$dofin1" \
          -dofin2   "$dofdir/1.3_res/average" \
          -dofdir   "$nrmdofs" \
          -noshearing

    fi

  end_dag

  # ----------------------------------------------------------------------------
  # generate population specific reference image/mask
  nrmdir="$outdir/average/t2w"
  nrmref="linear"
  nrmpre=""
  nrmsuf=".nii.gz"

  if [[ $refini == false ]]; then
    linref="$refid"
  else
    linref=
    [ -z "$refid" ] || nrmdir="$tmpdir"
  fi

  average_images_node 'make_average' -parent 'aff_alignment' \
      -subjects  "${subids[@]}" \
      -refdir    "$refdir" \
      -refpre    "$refpre" \
      -refid     "$linref" \
      -refsuf    "$refsuf" \
      -imgdir    "$imgdir" \
      -imgpre    "$imgpre" \
      -imgsuf    "$imgsuf" \
      -dofdir    "$nrmdofs" \
      -output    "$nrmdir/$nrmref$nrmsuf" \
      -spacing   "$resolution" \
      -padding   "$bgvalue" \
      -threshold "$threshold" \
      -normalize "$normalization" \
      -rescale   "$rescaling" \
      -sharpen   "$sharpen" \
      -margin    5

  prev_node='make_average'

  # ----------------------------------------------------------------------------
  # align images to user supplied input reference
  if [[ ! $refini == false ]] && [ -n "$refid" ]; then

    begin_dag 'ref_alignment' -parent "$prev_node" -splice

      # register user reference to constructed affine reference
      register_node 'reg_average' \
          -model   "Rigid" \
          -interp  "$interpolation" \
          -sim     "$similarity" \
          -bins    "$bins" \
          -radius  "$radius" \
          -tgtdir  "$nrmdir" \
          -tgtid   "$nrmref" \
          -tgtpre  "$nrmpre" \
          -tgtsuf  "$nrmsuf" \
          -srcdir  "$refdir" \
          -srcid   "$refid" \
          -srcpre  "$refpre" \
          -srcsuf  "$refsuf" \
          -bgvalue "$bgvalue" \
          -dofdir  "$tmpdir" \
          -dofid   "$nrmref"

      # transform linear average image to user reference space
      transform_image_node 'map_average' -parent 'reg_average' \
          -srcid    "$nrmref" \
          -srcdir   "$nrmdir" \
          -srcpre   "$nrmpre" \
          -srcsuf   "$nrmsuf" \
          -tgtdir   "$refdir" \
          -tgtid    "$refid" \
          -tgtpre   "$refpre" \
          -tgtsuf   "$refsuf" \
          -spacing  "$resolution" \
          -padding  "$bgvalue" \
          -dofins   "$tmpdir" -invert \
          -outdir   "$outdir/average/t2w" \
          -outid    "$nrmref" \
          -outpre   "$nrmpre" \
          -outsuf   "$nrmsuf"

      # compose affine transformations: image --> auto-ref --> user-ref
      compose_dofs_node 'compose_dofs' -parent 'reg_average' \
          -subjects "${subids[@]}" \
          -dofin1   "$nrmdofs" \
          -dofin2   "$tmpdir" -dofid2 "$nrmref" \
          -dofdir   "$dofdir/1.4_ref" \
          -noshearing

    end_dag

    # use user supplied reference space for non-rigid atlas construction
    prev_node="ref_alignment"
    nrmdofs="$dofdir/1.4_ref"
    nrmdir="$outdir/average/t2w"

  fi

  # ----------------------------------------------------------------------------
  # compute cross-sectional FFDs for each time point between each pair of images
  defdofs=""
  definvs=false
  resdof=false

  if [[ $pairwise == true ]]; then

    begin_dag 'def_alignment' -parent "$prev_node" -splice

      # determine unique pairs that need to be registered
      [ -f "$kernel/pairs.csv" ] || {
        lib/tools/query-pairs "$kernel/pairs.csv" "$kernel/$krnpre"*".$krnext"
        [ $? -eq 0 ] || error "Failed to determine unique pairs of images!"
      }

      # deformable registration of all pairs of images after global normalization
      register_node 'regpairs' \
          -subjects          "${subids[@]}" \
          -pairs             "$kernel/pairs.csv" \
          -imgdir            "$imgdir" \
          -imgpre            "$imgpre" \
          -imgsuf            "$imgsuf" \
          -model             "$model" \
          -mffd              "$mffd" \
          -symmetric         "$symmetric" \
          -spacing           "$spacing" \
          -bending           "$bending" \
          -elasticity        "$elasticity" \
          -elasticity-lambda "$elasticity_lambda" \
          -elasticity-mu     "$elasticity_mu" \
          -jacobian          "$jacobian" \
          -interp            "$interpolation" \
          -sim               "$similarity" \
          -bins              "$bins" \
          -radius            "$radius" \
          -bgvalue           "$bgvalue" \
          -inclbg            "$inclbg" \
          -hdrdofs           "$nrmdofs" \
          -dofins            "identity" \
          -dofdir            "$dofdir/2.1_def" \
          -domain            "$nrmdir/$nrmpre$nrmref$nrmsuf" \
          -maxres            "$resolution" \
          -levels            "$levels" \
          -group-inv         100

      # for each atlas time point...
      for t in ${timepoints[@]}; do

        # compute average deformations
        average_dofs_node "avgdefs_$t" -parent 'regpairs' \
            -doflst "$kernel/$krnpre${t}.$krnext" \
            -dofins "$dofdir/2.1_def" \
            -dofdir "$dofdir/2.2_avg/t$t" \
            -dofs

        # invert average deformations
        invert_dof_node "invavgs_$t"  -parent "avgdefs_$t" \
            -sublst "$kernel/$krnpre${t}.$krnext" \
            -dofins "$dofdir/2.2_avg/t$t" \
            -dofdir "$dofdir/2.3_inv/t$t" \
            -group  10

        # compute residual average deformation
        if [[ $useresdof == true ]]; then
          resdof="average"
          average_dofs_node "resdef_$t" -parent "invavgs_$t" \
              -doflst "$kernel/$krnpre${t}.$krnext" \
              -dofins "$dofdir/2.3_inv/t$t" \
              -dofdir "$dofdir/2.3_inv/t$t" \
              -dofid  "$resdof" -dofs
        fi

      done

    end_dag

    prev_node='def_alignment'
    defdofs="$dofdir/2.3_inv"
    definvs=true
  fi

  # ----------------------------------------------------------------------------
  # optional iterative refinement of local deformations
  #
  # 1. Update average image without global average scale    (--> mean intensity)
  # 2. Deform average image by residual average deformation (--> mean shape)
  # 3. Register current template to each image
  # 4. Repeat steps 1-3 a number of times
  #    (TODO: or until average image barely changes
  #           or as long as residual template deformation is not close to identity)
  if [ $refine -gt 0 ]; then
    begin_dag 'def_refinement' -parent "$prev_node" -splice

      prev_node=''

      i=1
      while [ $i -le $refine ]; do

        if [[ $pairwise == true ]]; then
          nxtdofs="$dofdir/3.${i}_def"
        else
          nxtdofs="$dofdir/2.${i}_def"
        fi

        # update template images
        begin_dag "make_templates_$i" -parent "$prev_node" -splice
          for t in ${timepoints[@]}; do

            if [ -n "$defdofs" ]; then
              curdofs="$defdofs/t$t"
            else
              curdofs=""
            fi

            # average intensity (minimize intensity difference)
            average_images_node "avgimgs_$t" \
                -sublst    "$kernel/$krnpre${t}.$krnext" \
                -imgdir    "$imgdir" \
                -imgpre    "$imgpre" \
                -imgsuf    "$imgsuf" \
                -refid     "$nrmref" \
                -refdir    "$nrmdir" \
                -refpre    "$nrmpre" \
                -refsuf    "$nrmsuf" \
                -dofin1    "$nrmdofs" \
                -dofin2    "$curdofs" -dofinv2 "$definvs" \
                -dofin3    "$curdofs" -dofid3 "$resdof" \
                -output    "$tmpdir/t2w_t${t}_${i}.nii.gz" \
                -padding   "$bgvalue" \
                -threshold "$threshold" \
                -normalize "$normalization" \
                -rescale   "$rescaling" \
                -sharpen   "$sharpen"

          done
        end_dag

        # register average images to each subject (after global normalization)
        begin_dag "reg_templates_$i" -parent "make_templates_$i" -splice
          for t in ${timepoints[@]}; do

            register_node "register_$t" \
                -sublst            "$kernel/$krnpre${t}.$krnext" \
                -imgdir            "$imgdir" \
                -imgpre            "$imgpre" \
                -imgsuf            "$imgsuf" \
                -tgtdir            "$tmpdir" \
                -tgtid             "t2w_t${t}_${i}" \
                -tgtsuf            ".nii.gz" \
                -model             "$model" \
                -mffd              "$mffd" \
                -symmetric         "$symmetric" \
                -spacing           "$spacing" \
                -bending           "$bending" \
                -elasticity        "$elasticity" \
                -elasticity-lambda "$elasticity_lambda" \
                -elasticity-mu     "$elasticity_mu" \
                -jacobian          "$jacobian" \
                -interp            "$interpolation" \
                -sim               "$similarity" \
                -bins              "$bins" \
                -radius            "$radius" \
                -bgvalue           "$bgvalue" \
                -inclbg            "$inclbg" \
                -hdrdofs           "$nrmdofs" \
                -dofins            "identity" \
                -dofdir            "$nxtdofs/t$t" \
                -domain            "$nrmdir/$nrmpre$nrmref$nrmsuf" \
                -maxres            "$resolution" \
                -levels            "$levels"

            resdof="average"
            average_dofs_node "average_$t" -parent "register_$t" \
                -doflst "$kernel/$krnpre${t}.$krnext" \
                -dofins "$nxtdofs/t$t" \
                -dofdir "$nxtdofs/t$t" \
                -dofid  "$resdof" \
                -dofs

          done
        end_dag

        prev_node="reg_templates_$i"
        defdofs="$nxtdofs"
        definvs=true

        let i++
      done

    end_dag

    unset -v i nxtdofs curdofs
    prev_node="def_refinement"
  fi

  if [[ "$finalize" == "true" ]]; then

    # --------------------------------------------------------------------------
    # average global scaling (i.e. brain size relative to global reference)
    begin_dag 'make_dofs' -parent "$prev_node" -splice
      for t in ${timepoints[@]}; do

        average_dofs_node "avgdof_$t" \
            -doflst "$kernel/$krnpre${t}.$krnext" \
            -dofins "$nrmdofs" \
            -dofdir "$outdir/dofs" \
            -dofid  "t$t" -outsuf ".dof" \
            -invert -norigid -noshearing

      done
    end_dag

    # --------------------------------------------------------------------------
    # make template images
    for mod in 't1w' 't2w'; do
      if [[ $mod == 't1w' ]]; then
        srcdir="$t1wdir"
        srcpre="$t1wpre"
        srcsuf="$t1wsuf"
      elif [[ $mod == 't2w' ]]; then
        srcdir="$t2wdir"
        srcpre="$t2wpre"
        srcsuf="$t2wsuf"
      fi
      if [[ $mod == 't2w' ]] && [ -z "$srcdir" ]; then
        srcdir="$imgdir"
        srcpre="$imgpre"
        srcsuf="$imgsuf"
      fi
      if [ -n "$srcdir" ]; then
        begin_dag "make_${mod}_templates" -parent "make_dofs" -splice
          for t in ${timepoints[@]}; do

            if [ -n "$defdofs" ]; then
              dofin2="$defdofs/t$t"
              dofin3="$defdofs/t$t"
            else
              dofin2=""
              dofin3=""
            fi

            average_images_node "average_$t" \
                -sublst    "$kernel/$krnpre${t}.$krnext" \
                -imgdir    "$srcdir" \
                -imgpre    "$srcpre" \
                -imgsuf    "$srcsuf" \
                -refid     "$nrmref" \
                -refdir    "$nrmdir" \
                -refpre    "$nrmpre" \
                -refsuf    "$nrmsuf" \
                -dofin1    "$nrmdofs" \
                -dofin2    "$dofin2" -dofinv2 "$definvs" \
                -dofin3    "$dofin3" -dofid3 "$resdof" \
                -output    "$outdir/average/$mod/t$t.nii.gz" \
                -padding   "$bgvalue" \
                -threshold "$threshold" \
                -normalize "$normalization" \
                -rescale   "$rescaling" \
                -sharpen   "$sharpen"

            transform_image_node "transform_$t" -parent "average_$t" \
                -srcdir "$outdir/average/$mod" \
                -srcpre "" \
                -srcid  "t$t" \
                -srcsuf ".nii.gz" \
                -tgtid  "$nrmref" \
                -tgtdir "$nrmdir" \
                -tgtpre "$nrmpre" \
                -tgtsuf "$nrmsuf" \
                -dofin1 "$outdir/dofs" -dofid1 "t$t" -dofsuf ".dof" -invert \
                -outdir "$outdir/templates/$mod"

          done

          unset -v dofin2 dofin3
        end_dag
      fi

      unset -v srcdir srcpre srcsuf
    done

    # --------------------------------------------------------------------------
    # make tissue probability maps
    if [ -n "$lbldir" ]; then
      inpdir="$(dirname  "$lbldir/${clspre}id")"
      prefix="$(basename "$lbldir/${clspre}id")"
      prefix="${prefix:0:${#prefix}-2}"
      if [ -d "$inpdir" ] && [ $(find -L "$inpdir" -name "$prefix*$lblsuf" | wc -l) -gt 0 ]; then
        begin_dag 'make_tissue_pbmaps' -parent "$prev_node" -splice

          for t in ${timepoints[@]}; do

            if [ -n "$defdofs" ]; then
              dofin2="$defdofs/t$t"
              dofin3="$defdofs/t$t"
            else
              dofin2=""
              dofin3=""
            fi

            l=1
            while [ $l -le $tissues ]; do

              average_images_node "make_tissue_pbmaps_${l}_${t}" \
                  -sublst "$kernel/$krnpre${t}.$krnext" \
                  -imgdir "$inpdir" \
                  -imgpre "$prefix" \
                  -imgsuf "$clssuf" \
                  -refid  "$nrmref" \
                  -refdir "$nrmdir" \
                  -refpre "$nrmpre" \
                  -refsuf "$nrmsuf" \
                  -dofin1 "$nrmdofs" \
                  -dofin2 "$dofin2" -dofinv2 "$definvs" \
                  -dofin3 "$dofin3" -dofid3 "$resdof" \
                  -output "$outdir/pbmaps/t$t/tissue_$l.nii.gz" \
                  -label "$l" -rescale "0 100" -dtype uchar
       
              let l++
            done
          done

          unset -v dofin2 dofin3
        end_dag
      fi
    fi

    # --------------------------------------------------------------------------
    # make structural probability maps
    if [ -n "$lbldir" ]; then
      inpdir="$(dirname  "$lbldir/${lblpre}id")"
      prefix="$(basename "$lbldir/${lblpre}id")"
      prefix="${prefix:0:${#prefix}-2}"
      if [ -d "$inpdir" ] && [ $(find -L "$inpdir" -name "$prefix*$lblsuf" | wc -l) -gt 0 ]; then
        begin_dag 'make_structural_pbmaps' -parent "$prev_node" -splice

          for t in ${timepoints[@]}; do

            if [ -n "$defdofs" ]; then
              dofin2="$defdofs/t$t"
              dofin3="$defdofs/t$t"
            else
              dofin2=""
              dofin3=""
            fi

            l=1
            while [ $l -le $structures ]; do

              average_images_node "make_structural_pbmaps_${l}_${t}" \
                  -sublst "$kernel/$krnpre${t}.$krnext" \
                  -imgdir "$inpdir" \
                  -imgpre "$prefix" \
                  -imgsuf "$lblsuf" \
                  -refid  "$nrmref" \
                  -refdir "$nrmdir" \
                  -refpre "$nrmpre" \
                  -refsuf "$nrmsuf" \
                  -dofin1 "$nrmdofs" \
                  -dofin2 "$dofin2" -dofinv2 "$definvs" \
                  -dofin3 "$dofin3" -dofid3 "$resdof" \
                  -output "$outdir/pbmaps/t$t/structure_$l.nii.gz" \
                  -label "$l" -rescale "0 100" -dtype uchar
       
              let l++
            done
          done

          unset -v dofin2 dofin3
        end_dag
      fi
    fi

  fi # finalize?

end_dag
