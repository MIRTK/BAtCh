#!/bin/bash

appid="$(basename "$0")"
appdir="$(cd "$(dirname "$BASH_SOURCE")" && pwd)"
appdir="$(cd "$appdir/.." && pwd)"

source "$appdir/lib/daggen/mirtk.sh" || {
  echo "Failed to import daggen/mirtk module!" 1>&2
  exit 1
}
source "$appdir/etc/config/default.sh" || {
  error "Failed to load default configuration"
}

# ==============================================================================
# help
# ==============================================================================

# ------------------------------------------------------------------------------
print_help()
{
  cat <<HELP

usage: $appid [options]

Warp (label) images using the computed pairwise transformations.

Options:
  -c, -config <config.sh>
      Custom configuration file. (default: none)
  -a, -agelst <age.csv>
      Comma/space-separated CSV file, where the first column contains
      the image ID and the second column the associated age.
      (default: $agelst)
  -s, -sublst <sub.lst>
      Text file listing the IDs of the images to use for the atlas construction.
      If not specified, the IDs are read from the -agelst.
      (default: $sublst)
  -i, -input <dir>
      Input directory containing the input images.
      (default: $inpdir)
  -o, -output <dir>
      Output directory where to write the transformed images to.
      (default: $outdir)
  -prefix <str>
      Filename prefix. (default: $prefix)
  -suffix <str>
      Filename suffix including file name extension. (default: $suffix)
  -interp, -interpolation <mode>
      Interpolation mode. (default: $interpolation)
  -putdof
      Set sform matrix of resample NIfTI image to include inverse global
      normalization from native image space to linear average space. (default: off)
  -images
      Default settings for intensity images.
  -labels
      Default settings for tissue label maps.
  -structures
      Default settings for structure label maps.
  -h, -help
      Print help and exit.
  -v, -verbose
      Enable verbose output messages.
HELP
}

# ==============================================================================
# auxiliary functions
# ==============================================================================

# ------------------------------------------------------------------------------
finalize()
{
  for id in ${pid[@]}; do
    kill ${pid[@]}
  done
  wait
}
trap finalize EXIT

# ==============================================================================
# main
# ==============================================================================

o=0
while [ $o -lt $# ]; do
  case "${!o}" in
    -c|-config)
      let a=o+1; optarg config ${!o} "${!a}";
      source "$config" || {
        error "Failed to load configuration from file: $config"
      }
      ;;
  esac
  let o++
done

[ -z "$agelst" ] || agelst="$topdir/$agelst"
[ -z "$sublst" ] || sublst="$topdir/$sublst"

evldir="$(cd "$topdir/.." && pwd)/eval"
inpdir="$topdir/$imgdir"
resdir="$evldir/warped-images"
prefix="$imgpre"
suffix="$imgsuf"
interp="$interpolation"
putdof='false'
options=()

while [ $# -gt 0 ]; do
  case "$1" in
    -i|-input)
      optarg inpdir $1 "$2"; shift; ;;
    -prefix)
      optarg prefix $1 "$2"; shift; ;;
    -suffix)
      optarg suffix $1 "$2"; shift; ;;
    -interp|-interpolation)
      optarg interp $1 "$2"; shift; ;;
    -putdof)
      putdof='true'; ;;
    -images)
      inpdir="$topdir/$imgdir"
      resdir="$evldir/warped-images"
      prefix="$imgpre"
      suffix="$imgsuf"
      interp="$interpolation"
      ;;
    -tissues)
      inpdir="$topdir/$lbldir"
      resdir="$evldir/warped-tissues"
      prefix="$clspre"
      suffix="$clssuf"
      interp='nn'
      ;;
    -structures)
      inpdir="$topdir/$lbldir"
      resdir="$evldir/warped-structures"
      prefix="$lblpre"
      suffix="$lblsuf"
      interp='nn'
      ;;
    -o|-output)
      optarg resdir $1 "$2"; shift; ;;
    -s|-sublst)
      optarg sublst $1 "$2"; shift; ;;
    -a|-agelst)
      optarg agelst $1 "$2"; shift; ;;
    -c|-config)
      shift; ;; # already loaded
    -l|-label)
      label=()
      optargs label "$@"
      shift ${#label[@]}
      ;;
    -m|-metric)
      optarg $1 "$2"; shift; ;;
    -h|-help|--help)
      print_help; exit 0; ;;
    -v|-verbose)
      let verbose++; ;;
    *)
      options=("${options[@]}" "$1"); ;;
  esac
  shift
done

_dir="$(dirname  "$inpdir/${prefix}id")"
_pre="$(basename "$inpdir/${prefix}id")"
inpdir="${_dir}"
prefix="${_pre:0:${#_pre}-2}"
unset -v _dir _pre

if [ -z "$agelst" ] || [ ! -f "$agelst" ]; then
  error "Missing CSV file with subject IDs and corresponding ages!"
fi
[ -n "$sublst" ] || sublst="$agelst"
read_sublst subids "$sublst"

target="$outdir/templates/t2w_lin.nii.gz"
[ -f "$target" ] || {
  error "Missing linear template: $target"
}

if [ -n "$refid" ]; then
  if [[ $refini == false ]]; then
    nrmdofs="$dofdir/1.2_ref"
  else
    nrmdofs="$dofdir/1.7_ref"
  fi
else
  nrmdofs="$dofdir/1.6_aff"
fi
[ -d "$nrmdofs" ] || {
  error "Missing global normalization transformations in $nrmdofs"
}

defdofs="$dofdir/2.1_def"
[ -d "$defdofs" ] || {
  error "Missing local free-form deformations in $defdofs"
}

mkdir -p "$resdir" || error "Failed to create output directory"

pid=()
t=0
for id1 in ${subids[@]}; do
  let t++
  [ $verbose -eq 0 ] || {
    echo "Transforming images to space of subject $id1... $(printf %3d/%d $t ${#subids[@]})"
  }
  mkdir -p "$resdir/$id1" || error "Failed to create output directory"
  if [ ! -f "$resdir/$id1/$prefix$id1$suffix" ]; then
    (
      # resample target in affine reference space
      mirtk transform-image \
          "$inpdir/$prefix$id1$suffix" \
          "$resdir/$id1/$prefix$id1$suffix" \
          -dof "$nrmdofs/$id1.dof.gz" \
          -dofin identity \
          -target "$target" \
          -interp "$interp"
      # transform resampled target back to original target space
      if [[ ! $putdof == false ]] && [ $? -eq 0 ]; then
        mirtk edit-image \
            "$resdir/$id1/$prefix$id1$suffix" \
            "$resdir/$id1/$prefix$id1$suffix" \
            -putdof_i "$nrmdofs/$id1.dof.gz"
      fi
    ) &
    pid=(${pid[@]} $!)
  fi
  for id2 in ${subids[@]}; do
    [[ $id1 != $id2 ]] || continue
    if [ ${#pid[@]} -eq 8 ]; then
      wait ${pid[0]}
      unset pid[0]
      pid=(${pid[@]})
    fi
    if [ ! -f "$resdir/$id1/$prefix$id2$suffix" ]; then
      (
        # deform and resample source in affine reference space
        mirtk transform-image \
            "$inpdir/$prefix$id2$suffix" \
            "$resdir/$id1/$prefix$id2$suffix" \
            -dof "$nrmdofs/$id2.dof.gz" \
            -dofin "$defdofs/$id1/$id2.dof.gz" \
            -target "$target" \
            -interp "$interp"
        # transform warped source to original target space
        if [[ ! $putdof == false ]] && [ $? -eq 0 ]; then
          mirtk edit-image \
              "$resdir/$id1/$prefix$id2$suffix" \
              "$resdir/$id1/$prefix$id2$suffix" \
              -putdof_i "$nrmdofs/$id1.dof.gz"
        fi
      ) &
      pid=(${pid[@]} $!)
    fi
  done
  wait && pid=()
  [ $verbose -eq 0 ] || echo "Transforming images to space of subject $id1... done"
done
