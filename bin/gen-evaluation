#! /bin/bash

appdir="$(cd "$(dirname "$BASH_SOURCE")" && pwd)"
appdir="$(cd "$appdir/.." && pwd)"

source "$appdir/lib/daggen/mirtk.sh" || {
  echo "Failed to import daggen/mirtk module!" 1>&2
  exit 1
}

# ==============================================================================
# help
# ==============================================================================

# ------------------------------------------------------------------------------
print_help()
{
  cat <<HELP

usage: $(basename "$0") [options]

This script generates the DAGMan application for the evaluation of the
pairwise transformations computed during the atlas construction.

Options:
  -s -sublst <sub.lst>     Text file listing the IDs of the images
                           to use for the atlas construction. If not
                           specified, the IDs are read from the -agelst.
                           (default: $appdir/etc/sub.lst)

  -a -agelst <age.csv>     Comma/space-separated CSV file, where the
                           first column contains the image ID and the
                           second column the associated age.
                           (default: $appdir/etc/age.csv)

  -c -config <config.sh>   Configuration file.
                           (default: $appdir/etc/config.sh)

  -h -help                 Print help and exit.
  -v -verbose              Enable verbose output messages.
HELP
}

# ==============================================================================
# configuration
# ==============================================================================

verbose=0
sublst=
agelst="$appdir/etc/age.csv"
config="$appdir/etc/config.sh"

o=0
while [ $o -lt $# ]; do
  case "${!o}" in
    -c|-config) let a=o+1; optarg config ${!o} "${!a}"; ;;
  esac
  let o++
done
source "$config"  || error "Failed to load configuration from file: $config"

while [ $# -gt 0 ]; do
  case "$1" in
    -s|-sublst)      optarg sublst $1 "$2"; shift; ;;
    -a|-agelst)      optarg agelst $1 "$2"; shift; ;;
    -c|-config)      shift; ;; # already loaded
    -h|-help|--help) print_help; exit 0; ;;
    -v|-verbose)     let verbose++; ;;
    -*)              error "Unknown option: $1"; ;;
    *)               if   [ -z "$agelst" ]; then agelst="$1"
                     elif [ -z "$sublst" ]; then sublst="$1"
                     else error "Too many arguments: $1"
                     fi; ;;
  esac
  shift
done

if [ -z "$agelst" ]; then
  error "Missing CSV file with subject IDs and corresponding ages!"
fi
if [ -z "$sublst" ]; then
  sublst="$appdir/etc/sub.lst"
  [ -f "$sublst" ] || sublst="$agelst"
fi
read_sublst subids "$sublst"

cd "$topdir" || { echo "Failed to change to working directory!" 1>&2; exit 1; }

# atlas time points for which kernel was create either manually,
# with another tool (e.g. MATLAB), or using the "kernel" shell script
timepoints=()
for doflst in $(ls "$kernel/weights_t="*".csv"); do
  t=${doflst/*_t=}; t=${t/.csv}
  timepoints=(${timepoints[@]} $t)
done
[ ${#timepoints[@]} -gt 0 ] || error "No temporal kernels $PWD/$kernel/weights_t=*.csv found"

# ==============================================================================
# workflow
# ==============================================================================

begin_dag 'eval' -dagfile "$dagdir/eval.dag"

  transform_image_node 'warp_images' \
      -outdir    "$evldir/warped-images" \
      -subjects  "${subids[@]}" \
      -bgvalue   "$bgvalue" \
      -hdrdofs   "$dofdir/1___affine" \
      -dofins    "$dofdir/2.1_ffd" \
      -ref       "$pardir/ref.nii.gz" \
      -prefix    "$imgdir/" \
      -suffix    ".nii.gz" \
      -interp    "linear" \
      -include_identity

  transform_image_node 'warp_tissues' \
      -outdir    "$evldir/warped-labels" \
      -subjects  "${subids[@]}" \
      -bgvalue   "$bgvalue" \
      -hdrdofs   "$dofdir/1___affine" \
      -dofins    "$dofdir/2.1_ffd" \
      -ref       "$pardir/ref.nii.gz" \
      -prefix    "$lbldir/" \
      -suffix    "-tissues.nii.gz" \
      -interp    "nn" \
      -include_identity

end_dag
