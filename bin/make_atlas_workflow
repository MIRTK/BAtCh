#! /bin/bash

appdir="$(cd "$(dirname "$BASH_SOURCE")/.." && pwd)"
. "$appdir/lib/utils.sh" || { echo "Failed to import utils module!" 1>&2; exit 1; }

# ==============================================================================
# help
# ==============================================================================

# ------------------------------------------------------------------------------
print_help()
{
  cat <<HELP

usage: $(basename "$0") [options]

This script generates the DAGMan application for the generation of a
consistent brain atlas and growth model for submission to the batch
queuing system HTCondor for distributed parallel execution.

Options:
  -s -sublst <sub.lst>     Text file listing the IDs of the images
                           to use for the atlas construction. If not
                           specified, the IDs are read from the -agelst.
                           (default: $appdir/etc/sub.lst)

  -a -agelst <age.csv>     Comma/space-separated CSV file, where the
                           first column contains the image ID and the
                           second column the associated age.
                           (default: $appdir/etc/age.csv)

  -c -config <config.sh>   Configuration file.
                           (default: $appdir/etc/config.sh)

  -h -help                 Print help and exit.
  -v -verbose              Enable verbose output messages.
HELP
}

# ==============================================================================
# configuration
# ==============================================================================

verbose=0
sublst=
agelst="$appdir/etc/age.csv"
config="$appdir/etc/config.sh"

o=0
while [ $o -lt $# ]; do
  case "${!o}" in
    -c|-config) let a=o+1; optarg config ${!o} "${!a}"; ;;
  esac
  let o++
done
. "$config"  || error "Failed to load configuration from file: $config"

while [ $# -gt 0 ]; do
  case "$1" in
    -s|-sublst)      optarg sublst $1 "$2"; shift; ;;
    -a|-agelst)      optarg agelst $1 "$2"; shift; ;;
    -c|-config)      shift; ;; # already loaded
    -h|-help|--help) print_help; exit 0; ;;
    -v|-verbose)     let verbose++; ;;
    -*)              error "Unknown option: $1"; ;;
    *)               if   [ -z "$agelst" ]; then agelst="$1"
                     elif [ -z "$sublst" ]; then sublst="$1"
                     else error "Too many arguments: $1"
                     fi; ;;
  esac
  shift
done

if [ -z "$agelst" ]; then
  error "Missing CSV file with subject IDs and corresponding ages!"
fi
if [ -z "$sublst" ]; then
  sublst="$appdir/etc/sub.lst"
  [ -f "$sublst" ] || sublst="$agelst"
fi
read_sublst subids "$sublst"

cd "$topdir" || error "Failed to change to top-level directory!"

makedir "$moddir"
makedir "$dagdir"

# ==============================================================================
section='# 1. linear normalization'
# ==============================================================================

# ------------------------------------------------------------------------------
# 1.1 initialize transformations (7 DoFs)
make_ireg_node \
    -name     "1.1_initialize_dofs" \
    -model    "Similarity" \
    -subjects "${subids[@]}" \
    -dofdir   "$dofdir/1.1_initial" \
    -logdir   "$logdir/1.1_initialize_dofs"

# ------------------------------------------------------------------------------
# 1.2 affine registration (9 DoFs)
make_ireg_node \
    -name     "1.2_affine_registration" \
    -model    "Affine" -par "Allow shearing = No" \
    -subjects "${subids[@]}" \
    -bgvalue  "$bgvalue" \
    -dofins   "$dofdir/1.1_initial" \
    -dofdir   "$dofdir/1.2_affine" \
    -logdir   "$logdir/1.2_affine_registration"

# ------------------------------------------------------------------------------
# 1.3 average dofs
make_dofaverage_node \
    -name     "1.3_average_dofs" \
    -subjects "${subids[@]}" \
    -sublst   "$sublst" \
    -dofins   "$dofdir/1.2_affine" \
    -dofdir   "$dofdir/1.3_average" \
    -logdir   "$logdir/1.3_average_dofs"

# ------------------------------------------------------------------------------
# 1.4 affine refinement (9 DoFs)
make_ireg_node \
    -name     "1.4_affine_refinement" \
    -model    "Affine" -par "Allow shearing = No" \
    -subjects "${subids[@]}" \
    -bgvalue  "$bgvalue" \
    -hdrdofs  "$dofdir/1.3_average" \
    -dofdir   "$dofdir/1.4_refined" \
    -logdir   "$logdir/1.4_affine_refinement"

# ------------------------------------------------------------------------------
# 1.5 average dofs
make_dofaverage_node \
    -name     "1.5_average_dofs" \
    -subjects "${subids[@]}" \
    -sublst   "$sublst" \
    -dofins   "$dofdir/1.4_refined" \
    -dofdir   "$dofdir/1.5_average" \
    -logdir   "$logdir/1.5_average_dofs"

# ------------------------------------------------------------------------------
# 1.6 compose average dofs
make_dofcombine_node \
    -name     "1.6_finalize_dofs" \
    -subjects "${subids[@]}" \
    -dofdir1  "$dofdir/1.3_average" \
    -dofdir2  "$dofdir/1.5_average" \
    -dofdir3  "$dofdir/1___affine" \
    -logdir   "$logdir/1.6_finalize_dofs"

# ------------------------------------------------------------------------------
# DAG file
dagfile="$dagdir/1_normalization.dag"
cat --<<EOF > "$dagfile"
$section
JOB        1_init     $topdir/$moddir/1.1_initialize_dofs.sub
JOB        1_affreg1  $topdir/$moddir/1.2_affine_registration.sub
JOB        1_avgdof1  $topdir/$moddir/1.3_average_dofs.sub
JOB        1_affreg2  $topdir/$moddir/1.4_affine_refinement.sub
JOB        1_avgdof2  $topdir/$moddir/1.5_average_dofs.sub
JOB        1_final    $topdir/$moddir/1.6_finalize_dofs.sub

SCRIPT PRE 1_init     $topdir/$moddir/1.1_initialize_dofs.pre
SCRIPT PRE 1_affreg1  $topdir/$moddir/1.2_affine_registration.pre
SCRIPT PRE 1_avgdof1  $topdir/$moddir/1.3_average_dofs.pre
SCRIPT PRE 1_affreg2  $topdir/$moddir/1.4_affine_refinement.pre
SCRIPT PRE 1_avgdof2  $topdir/$moddir/1.5_average_dofs.pre
SCRIPT PRE 1_final    $topdir/$moddir/1.6_finalize_dofs.pre

PARENT 1_init    CHILD 1_affreg1
PARENT 1_affreg1 CHILD 1_avgdof1
PARENT 1_avgdof1 CHILD 1_affreg2
PARENT 1_affreg2 CHILD 1_avgdof2
PARENT 1_avgdof2 CHILD 1_final
EOF
[ -f "$dagfile" ] || error "Failed to write workflow to file $dagfile"

# ==============================================================================
section='# 2. spatio-temporal deformation'
# ==============================================================================

# ------------------------------------------------------------------------------
# DAG file
dagfile="$dagdir/2_deformation.dag"
cat --<<EOF > "$dagfile"
$section
EOF
[ -f "$dagfile" ] || error "Failed to write workflow to file $dagfile"

# ==============================================================================
section='# 3. anatomical template creation'
# ==============================================================================

# ------------------------------------------------------------------------------
# DAG file
dagfile="$dagdir/3_anatomy.dag"
cat --<<EOF > "$dagfile"
$section
EOF
[ -f "$dagfile" ] || error "Failed to write workflow to file $dagfile"

# ==============================================================================
section='# 4. tissue probability maps'
# ==============================================================================

# ------------------------------------------------------------------------------
# DAG file
dagfile="$dagdir/4_tissues.dag"
cat --<<EOF > "$dagfile"
$section
EOF
[ -f "$dagfile" ] || error "Failed to write workflow to file $dagfile"

# ==============================================================================
section='# 5. structure probability maps'
# ==============================================================================

# ------------------------------------------------------------------------------
# DAG file
dagfile="$dagdir/5_structures.dag"
cat --<<EOF > "$dagfile"
$section
EOF
[ -f "$dagfile" ] || error "Failed to write workflow to file $dagfile"

# ==============================================================================
# DAGMan application
# ==============================================================================

dagfile="$dagdir/main.dag"
cat --<<EOF >  "$dagfile"
SUBDAG EXTERNAL 1_normalization  $topdir/$dagdir/1_normalization.dag
SUBDAG EXTERNAL 2_deformation    $topdir/$dagdir/2_deformation.dag
SUBDAG EXTERNAL 3_anatomy        $topdir/$dagdir/3_anatomy.dag
SUBDAG EXTERNAL 4_tissues        $topdir/$dagdir/4_tissues.dag
SUBDAG EXTERNAL 5_structures     $topdir/$dagdir/5_structures.dag

PARENT 1_normalization CHILD 2_deformation
PARENT 2_deformation   CHILD 3_anatomy
PARENT 3_anatomy       CHILD 4_tissues
PARENT 4_tissues       CHILD 5_structures
EOF
