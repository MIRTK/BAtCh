#!/bin/bash

appid="$(basename "$0")"
appdir="$(cd "$(dirname "$BASH_SOURCE")" && pwd)"
appdir="$(cd "$appdir/.." && pwd)"

source "$appdir/lib/daggen/utils.sh" || {
  echo "Failed to import daggen/utils module!" 1>&2
  exit 1
}
source "$appdir/etc/config/default.sh" || {
  error "Failed to load default configuration"
}

# ==============================================================================
# help
# ==============================================================================

# ------------------------------------------------------------------------------
print_help()
{
  cat <<HELP

usage: $appid [options]

Compute overlap of all pairwise transformations.

Options:
  -c, -config <config.sh>
      Custom configuration file. (default: none)
  -a, -agelst <age.csv>
      Comma/space-separated CSV file, where the first column contains
      the image ID and the second column the associated age.
      (default: $agelst)
  -s, -sublst <sub.lst>
      Text file listing the IDs of the images to use for the atlas construction.
      If not specified, the IDs are read from the -agelst.
      (default: $sublst)
  -i -input <dir>
      Input directory containing the warped label maps.
      (default: $inpdir)
  -o -output <dir>
      Output directory where to write the results to.
      (default: $resdir)
  -l -label <label>...
      Segmentation label.
      (default: Draw-EM tissue labels)
  -m -metric <metric>
      Overlap metric: Sensitivity, Specificity, Dice, Jaccard.
      (default: Dice)
  -r -reference
      Boolean flag indicating that transformations are with respect to a
      reference image. The -input directory contains one transformed label
      map per subject ID in -sublst. If this flag is not given, the input
      directory must contain one subdirectory for each subject ID for those
      label maps that were aligned with this respective target subject.
  -h -help
      Print help and exit.
  -v -verbose
      Enable verbose output messages.
HELP
}

# ==============================================================================
# auxiliary functions
# ==============================================================================

label_name()
{
  [ $1 -eq 1 ] && echo -n 'CSF'
  [ $1 -eq 2 ] && echo -n 'cGM'
  [ $1 -eq 3 ] && echo -n 'WM'
  [ $1 -eq 4 ] && echo -n 'Background'
  [ $1 -eq 5 ] && echo -n 'Ventricles'
  [ $1 -eq 6 ] && echo -n 'Cerebellum+Brainstem'
  [ $1 -eq 7 ] && echo -n 'dGM'
  [ $1 -lt 0 -o $1 -gt 7 ] && echo -n $1
}

# ==============================================================================
# main
# ==============================================================================

o=0
while [ $o -lt $# ]; do
  case "${!o}" in
    -c|-config)
      let a=o+1; optarg config ${!o} "${!a}";
      source "$config" || {
        error "Failed to load configuration from file: $config"
      }
      ;;
  esac
  let o++
done

[ -z "$agelst" ] || agelst="$topdir/$agelst"
[ -z "$sublst" ] || sublst="$topdir/$sublst"

options=()
label=(1 2 3 5 6 7 8 9)
metric='Dice'
evldir="$(cd "$topdir/.." && pwd)/eval"
inpdir="$evldir/warped-tissues"
resdir="$evldir/overlap"
reftgt='false'

while [ $# -gt 0 ]; do
  case "$1" in
    -i|-input)       optarg inpdir $1 "$2"; shift; ;;
    -o|-output)      optarg resdir $1 "$2"; shift; ;;
    -s|-sublst)      optarg sublst $1 "$2"; shift; ;;
    -a|-agelst)      optarg agelst $1 "$2"; shift; ;;
    -c|-config)      shift; ;; # already loaded
    -l|-label)       label=(); optargs label "$@"; shift ${#label[@]}; ;;
    -m|-metric)      optarg $1 "$2"; shift; ;;
    -r|-reference)   reftgt='true'; ;;
    -h|-help|--help) print_help; exit 0; ;;
    -v|-verbose)     let verbose++; ;;
    *)               options=("${options[@]}" "$1"); ;;
  esac
  shift
done

[ -n "$sublst" ] || sublst="$agelst"
if [ -z "$sublst" ] || [ ! -f "$sublst" ]; then
  error "Missing text file with subject IDs!"
fi
read_sublst subids "$sublst"

csv_header=''
for id2 in ${subids[@]}; do
  [[ $id2 == ${subids[0]} ]] || csv_header="$csv_header,"
  csv_header="$csv_header$id2"
done

mkdir -p "$resdir" || error "Failed to create output directory"

for lbl in ${label[@]}; do
  #structure=$(label_name $lbl)
  structure="label_$lbl"
  [ $verbose -le 0 ] || echo "Evaluating pairwise overlap for $structure..."
  csv_name="$resdir/${metric}_of_${structure}.csv"
  rm -f "$csv_name"
  echo "$csv_header" >> "$csv_name"
  t=0
  for id1 in ${subids[@]}; do
    let t++
    [ $verbose -le 1 ] || {
      echo "Evaluating pairwise overlap for $structure... $(printf %3d/%d $t ${#subids[@]}) (target=$id1)"
    }
    if [ $reftgt = 'true' ]; then
      tgt="$inpdir/$id1.nii.gz"
    else
      tgt="$inpdir/$id1/$id1.nii.gz"
    fi
    src=()
    for id2 in ${subids[@]}; do
      if [ $reftgt = 'true' ]; then
        src=("${src[@]}" "$inpdir/$id2.nii.gz")
      else
        src=("${src[@]}" "$inpdir/$id1/$id2.nii.gz")
      fi
    done
    mirtk evaluate-overlap "$tgt" "${src[@]}" -v 0 -metric $metric -label $lbl -delim ',' >> "${csv_name}"
    echo >> "${csv_name}"
  done
  [ $verbose -le 0 ] || echo "Evaluating pairwise overlap for $structure... done"
done
